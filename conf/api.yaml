services:
  cb-spider: #service name
    version: 0.11.13
    baseurl: http://cb-spider:1024/spider # baseurl is Scheme + Host + Base Path
    auth: #If you need an authentication method, describe the type and username and password in the sub
      # type: basic
      # username: default
      # password: default

  cb-tumblebug:
    version: 0.11.13
    baseurl: http://cb-tumblebug:1323/tumblebug
    auth:
      type: basic
      username: default
      password: default
  cm-ant:
    version: 0.4.0
    baseurl: http://cm-ant:8880/ant
    auth:
      type: none
  cm-beetle:
    version: 0.4.0
    baseurl: http://cm-beetle:8056/beetle
    auth:
      type: basic
      username: default
      password: default

  cm-butterfly-api:
    version: 0.4.0
    #baseurl: http://localhost:4000
    baseurl: http://cm-butterfly-api:4000
    auth:
      type: none
      
  cm-cicada:
    version: 0.4.0
    baseurl: http://cm-cicada:8083/cicada
    auth:
      type: none

  cm-honeybee:
    version: 0.4.0
    baseurl: http://cm-honeybee:8081/honeybee
    auth:
      type: none 

  cm-grasshopper:
    version: 0.4.0
    baseurl: http://cm-grasshopper:8084/grasshopper
    auth:
      type: none

  cm-damselfly:
    baseurl: http://cm-damselfly:8088/damselfly
    auth:
      type: basic
      username: default
      password: default

serviceActions:
  cb-spider:
    Add-Nlb-Vm:
      method: post
      resourcePath: /nlb/{Name}/vms
      description: Add a new set of VMs to an existing Network Load Balancer (NLB).
    Add-Nodegroup:
      method: post
      resourcePath: /cluster/{Name}/nodegroup
      description: Add a new Node Group to an existing Cluster.
    Add-Rule:
      method: post
      resourcePath: /securitygroup/{SGName}/rules
      description: Add new rules to a Security Group.
    Add-Subnet:
      method: post
      resourcePath: /vpc/{VPCName}/subnet
      description: Add a new Subnet to an existing VPC.
    Add-Tag:
      method: post
      resourcePath: /tag
      description: |-
        Add a tag to a specified resource.
        ※ Resource types: VPC, SUBNET, SG, KEY, VM, NLB, DISK, MYIMAGE, CLUSTER
    Any-Call:
      method: post
      resourcePath: /anycall
      description: "Execute a custom function (FID) with key-value parameters through
        AnyCall. \U0001F577️ [[Development Guide](https://github.com/cloud-barista/cb-spider/wiki/AnyCall-API-Extension-Guide)]"
    Attach-Disk:
      method: put
      resourcePath: /disk/{Name}/attach
      description: Attach an existing Disk to a VM.
    Change-Nodegroup-Scaling:
      method: put
      resourcePath: /cluster/{Name}/nodegroup/{NodeGroupName}/autoscalesize
      description: Change the scaling settings for a Node Group in a Cluster.
    Check-Tcp-Port:
      method: get
      resourcePath: /check/tcp
      description: Verifies whether a given TCP port is open on the specified host.
    Check-Udp-Port:
      method: get
      resourcePath: /check/udp
      description: |-
        Verifies whether a given UDP port is open on the specified host.
        ※ Note: As UDP is connectionless, this check mainly performs a lookup and may not confirm if the server is working.
    Control-Vm:
      method: put
      resourcePath: /controlvm/{Name}
      description: Control the state of a Virtual Machine (VM) such as suspend, resume,
        or reboot.
    Count-All-Cluster:
      method: get
      resourcePath: /countcluster
      description: Get the total number of Clusters across all connections.
    Count-All-Connection:
      method: get
      resourcePath: /countconnectionconfig
      description: Get the total number of connections.
    Count-All-Disk:
      method: get
      resourcePath: /countdisk
      description: Get the total number of Disks across all connections.
    Count-All-Keypair:
      method: get
      resourcePath: /countkeypair
      description: Get the total number of KeyPairs across all connections.
    Count-All-Myimage:
      method: get
      resourcePath: /countmyimage
      description: Get the total number of MyImages across all connections.
    Count-All-Nlb:
      method: get
      resourcePath: /countnlb
      description: Get the total number of Network Load Balancers (NLBs) across all
        connections.
    Count-All-Securitygroup:
      method: get
      resourcePath: /countsecuritygroup
      description: Get the total number of Security Groups across all connections.
    Count-All-Subnet:
      method: get
      resourcePath: /countsubnet
      description: Get the total number of Subnets across all connections.
    Count-All-Vm:
      method: get
      resourcePath: /countvm
      description: Get the total number of Virtual Machines (VMs) across all connections.
    Count-All-Vpc:
      method: get
      resourcePath: /countvpc
      description: Get the total number of VPCs across all connections.
    Count-Cluster-By-Connection:
      method: get
      resourcePath: /countcluster/{ConnectionName}
      description: Get the total number of Clusters for a specific connection.
    Count-Connection-By-Provider:
      method: get
      resourcePath: /countconnectionconfig/{ProviderName}
      description: Get the total number of connections for a specific provider.
    Count-Disk-By-Connection:
      method: get
      resourcePath: /countdisk/{ConnectionName}
      description: Get the total number of Disks for a specific connection.
    Count-Keypair-By-Connection:
      method: get
      resourcePath: /countkeypair/{ConnectionName}
      description: Get the total number of KeyPairs for a specific connection.
    Count-Myimage-By-Connection:
      method: get
      resourcePath: /countmyimage/{ConnectionName}
      description: Get the total number of MyImages for a specific connection.
    Count-Nlb-By-Connection:
      method: get
      resourcePath: /countnlb/{ConnectionName}
      description: Get the total number of Network Load Balancers (NLBs) for a specific
        connection.
    Count-Securitygroup-By-Connection:
      method: get
      resourcePath: /countsecuritygroup/{ConnectionName}
      description: Get the total number of Security Groups for a specific connection.
    Count-Subnet-By-Connection:
      method: get
      resourcePath: /countsubnet/{ConnectionName}
      description: Get the total number of Subnets for a specific connection.
    Count-Vm-By-Connection:
      method: get
      resourcePath: /countvm/{ConnectionName}
      description: Get the total number of Virtual Machines (VMs) for a specific connection.
    Count-Vpc-By-Connection:
      method: get
      resourcePath: /countvpc/{ConnectionName}
      description: Get the total number of VPCs for a specific connection.
    Create-Cluster:
      method: post
      resourcePath: /cluster
      description: "Create a new Cluster with specified configurations. \U0001F577️
        [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/Provider-Managed-Kubernetes-and-Driver-API)]
        <br> * NodeGroupList is optional, depends on CSP type: <br> &nbsp;- Type-I
        (e.g., Tencent, Alibaba): requires separate Node Group addition after Cluster
        creation. <br> &nbsp;- Type-II (e.g., Azure, NHN): mandates at least one Node
        Group during initial Cluster creation."
    Create-Connection-Config:
      method: post
      resourcePath: /connectionconfig
      description: "Create a new Connection Config. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#4-cloud-connection-configuration-%EC%A0%95%EB%B3%B4-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B4%80%EB%A6%AC)]"
    Create-Disk:
      method: post
      resourcePath: /disk
      description: "Create a new Disk with the specified configuration. \U0001F577️
        [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/Disk-and-Driver-API)],
        [[Snapshot-MyImage,Disk Guide](https://github.com/cloud-barista/cb-spider/wiki/VM-Snapshot,-MyImage-and-Disk-Overview)]"
    Create-Filesystem:
      method: post
      resourcePath: /filesystem
      description: Create a new FileSystem with the specified configuration.
    Create-Keypair:
      method: post
      resourcePath: /keypair
      description: "Create a new KeyPair with the specified configurations. \U0001F577️
        [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#5-vm-keypair-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%A0%9C%EC%96%B4)]"
    Create-Myimage:
      method: post
      resourcePath: /myimage
      description: "Create a new MyImage snapshot from a specified VM. \U0001F577️
        [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/MyImage-and-Driver-API)],
        [[Snapshot-MyImage,Disk Guide](https://github.com/cloud-barista/cb-spider/wiki/VM-Snapshot,-MyImage-and-Disk-Overview)]"
    Create-Nlb:
      method: post
      resourcePath: /nlb
      description: "Create a new Network Load Balancer (NLB) with specified configurations.
        \U0001F577️ [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/Network-Load-Balancer-and-Driver-API)]"
    Create-Securitygroup:
      method: post
      resourcePath: /securitygroup
      description: "Create a new Security Group with specified rules and tags. \U0001F577️
        [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/Security-Group-Rules-and-Driver-API)],
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#4-securitygroup-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%A0%9C%EC%96%B4)]"
    Create-Vpc:
      method: post
      resourcePath: /vpc
      description: "Create a new Virtual Private Cloud (VPC) with specified subnet
        configurations. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#3-vpcsubnet-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%A0%9C%EC%96%B4)]"
    Delete-Cluster:
      method: delete
      resourcePath: /cluster/{Name}
      description: Delete a specified Cluster.
    Delete-Connection-Config:
      method: delete
      resourcePath: /connectionconfig/{ConfigName}
      description: Delete a specific Connection Config.
    Delete-Csp-Cluster:
      method: delete
      resourcePath: /cspcluster/{Id}
      description: Delete a specified CSP Cluster.
    Delete-Csp-Disk:
      method: delete
      resourcePath: /cspdisk/{Id}
      description: Delete a specified CSP Disk.
    Delete-Csp-Keypair:
      method: delete
      resourcePath: /cspkeypair/{Id}
      description: Delete a specified CSP KeyPair.
    Delete-Csp-Myimage:
      method: delete
      resourcePath: /cspmyimage/{Id}
      description: Delete a specified CSP MyImage.
    Delete-Csp-Nlb:
      method: delete
      resourcePath: /cspnlb/{Id}
      description: Delete a specified CSP Network Load Balancer (NLB).
    Delete-Csp-Securitygroup:
      method: delete
      resourcePath: /cspsecuritygroup/{Id}
      description: Delete a specified CSP Security Group.
    Delete-Csp-Vpc:
      method: delete
      resourcePath: /cspvpc/{Id}
      description: Delete a specified CSP Virtual Private Cloud (VPC).
    Delete-Disk:
      method: delete
      resourcePath: /disk/{Name}
      description: Delete a specified Disk.
    Delete-Keypair:
      method: delete
      resourcePath: /keypair/{Name}
      description: Delete a specified KeyPair.
    Delete-Myimage:
      method: delete
      resourcePath: /myimage/{Name}
      description: Delete a specified MyImage.
    Delete-Nlb:
      method: delete
      resourcePath: /nlb/{Name}
      description: Delete a specified Network Load Balancer (NLB).
    Delete-Securitygroup:
      method: delete
      resourcePath: /securitygroup/{Name}
      description: Delete a specified Security Group.
    Delete-Vpc:
      method: delete
      resourcePath: /vpc/{Name}
      description: Delete a specified Virtual Private Cloud (VPC).
    Destroy-All-Resource:
      method: delete
      resourcePath: /destroy
      description: Deletes all resources associated with a specific cloud connection.
        This action is irreversible.
    Detach-Disk:
      method: put
      resourcePath: /disk/{Name}/detach
      description: Detach an existing Disk from a VM.
    Fetch-Resource-Usage:
      method: get
      resourcePath: /sysstats/usage
      description: |-
        Retrieve resource usage information such as CPU, memory, disk I/O, and network I/O.
        Use query parameter 'mode=text' to get the output in text format instead of JSON.
    Fetch-System-Info:
      method: get
      resourcePath: /sysstats/system
      description: |-
        Retrieve system information such as hostname, platform, CPU, memory, and disk.
        Use query parameter 'mode=text' to get the output in text format instead of JSON.
    Get-Cloudos-Metainfo:
      method: get
      resourcePath: /cloudos/metainfo/{CloudOSName}
      description: Retrieve metadata information for a specific Cloud OS.
    Get-Cluster:
      method: get
      resourcePath: /cluster/{Name}
      description: Retrieve details of a specific Cluster.
    Get-Cluster-Owner-Vpc:
      method: post
      resourcePath: /getclusterowner
      description: Retrieve the owner VPC of a specified Cluster.
    Get-Connection-Config:
      method: get
      resourcePath: /connectionconfig/{ConfigName}
      description: Retrieve details of a specific Connection Config.
    Get-Credential:
      method: get
      resourcePath: /credential/{CredentialName}
      description: Retrieve details of a specific Credential.
    Get-Csp-Vm:
      method: get
      resourcePath: /cspvm/{Id}
      description: Retrieve details of a specific CSP Virtual Machine (VM).
    Get-Disk:
      method: get
      resourcePath: /disk/{Name}
      description: Retrieve details of a specific Disk.
    Get-Driver:
      method: get
      resourcePath: /driver/{DriverName}
      description: Retrieve details of a specific Cloud Driver.
    Get-Driver-Capability:
      method: get
      resourcePath: /driver/capability
      description: Retrieve capability information of the cloud driver.
    Get-Image:
      method: get
      resourcePath: /vmimage/{Name}
      description: "Retrieve details of a specific Public Image. \U0001F577️ [[User
        Guide](https://github.com/cloud-barista/cb-spider/wiki/How-to-get-Image-List-with-REST-API)]"
    Get-Keypair:
      method: get
      resourcePath: /keypair/{Name}
      description: Retrieve details of a specific KeyPair.
    Get-Myimage:
      method: get
      resourcePath: /myimage/{Name}
      description: Retrieve details of a specific MyImage.
    Get-Nlb:
      method: get
      resourcePath: /nlb/{Name}
      description: Retrieve details of a specific Network Load Balancer (NLB).
    Get-Nlb-Owner-Vpc:
      method: post
      resourcePath: /getnlbowner
      description: Retrieve the owner VPC of a specified Network Load Balancer (NLB).
    Get-Org-Vm-Spec:
      method: get
      resourcePath: /vmorgspec/{Name}
      description: Retrieve details of a specific Original VM Spec.
    Get-Region:
      method: get
      resourcePath: /region/{RegionName}
      description: Retrieve details of a specific Region.
    Get-Region-Zone:
      method: get
      resourcePath: /regionzone/{Name}
      description: "Retrieve details of a specific Region Zone. \U0001F577️ [[User
        Guide](https://github.com/cloud-barista/cb-spider/wiki/REST-API-Region-Zone-Information-Guide)]"
    Get-Region-Zone-Preconfig:
      method: get
      resourcePath: /preconfig/regionzone/{Name}
      description: "Retrieve details of a specific pre-configured Region Zone based
        on driver and credential names. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/REST-API-Region-Zone-Information-Guide)]"
    Get-Securitygroup:
      method: get
      resourcePath: /securitygroup/{Name}
      description: Retrieve details of a specific Security Group.
    Get-Sg-Owner-Vpc:
      method: post
      resourcePath: /getsecuritygroupowner
      description: Retrieve the owner VPC of a specified Security Group.
    Get-Subnet:
      method: get
      resourcePath: /vpc/{VPCName}/subnet/{SubnetName}
      description: Retrieve a specific Subnet from a VPC.
    Get-Tag:
      method: get
      resourcePath: /tag/{Key}
      description: |-
        Retrieve a specific tag for a specified resource.
        ※ Resource types: VPC, SUBNET, SG, KEY, VM, NLB, DISK, MYIMAGE, CLUSTER
    Get-Vm:
      method: get
      resourcePath: /vm/{Name}
      description: Retrieve details of a specific Virtual Machine (VM).
    Get-Vm-Spec:
      method: get
      resourcePath: /vmspec/{Name}
      description: "Retrieve details of a specific VM spec. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#2-vm-spec-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5)]"
    Get-Vm-Status:
      method: get
      resourcePath: /vmstatus/{Name}
      description: Retrieve the status of a specific Virtual Machine (VM).
    Get-Vm-Using-Rs:
      method: post
      resourcePath: /getvmusingresources
      description: Retrieve details of a VM using resource ID.
    Get-Vmgroup-Healthinfo:
      method: get
      resourcePath: /nlb/{Name}/health
      description: Retrieve the health information of the VM group in a specified
        Network Load Balancer (NLB).
    Get-Vmprice-Info:
      method: post
      resourcePath: /priceinfo/vm/{RegionName}
      description: "Retrieve VM Price Information for a specific connection and region.
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/VM-Price-Info-Guide)]
        <br> * example body: {\"connectionName\":\"aws-connection\",\"FilterList\":[{\"Key\":\"instanceType\",\"Value\":\"t2.micro\"}]}"
    Get-Vpc:
      method: get
      resourcePath: /vpc/{Name}
      description: Retrieve details of a specific Virtual Private Cloud (VPC).
    Health-Check-Health:
      method: get
      resourcePath: /health
      description: "Checks the health of CB-Spider service and its dependencies via
        /health endpoint. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/Readiness-Check-Guide)]"
    Health-Check-Healthcheck:
      method: get
      resourcePath: /healthcheck
      description: "Checks the health of CB-Spider service and its dependencies via
        /healthcheck endpoint. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/Readiness-Check-Guide)]"
    Health-Check-Ping:
      method: get
      resourcePath: /ping
      description: "Checks the health of CB-Spider service and its dependencies via
        /ping endpoint. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/Readiness-Check-Guide)]"
    Health-Check-Readyz:
      method: get
      resourcePath: /readyz
      description: "Checks the health of CB-Spider service and its dependencies via
        /readyz endpoint. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/Readiness-Check-Guide)]"
    Increase-Disk-Size:
      method: put
      resourcePath: /disk/{Name}/size
      description: Increase the size of an existing disk.
    List-All-Cluster:
      method: get
      resourcePath: /allcluster
      description: Retrieve a comprehensive list of all Clusters associated with a
        specific connection, <br> including those mapped between CB-Spider and the
        CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Cluster-Info:
      method: get
      resourcePath: /allclusterinfo
      description: Retrieve a list of all Cluster information associated with a specific
        connection.
    List-All-Disk:
      method: get
      resourcePath: /alldisk
      description: Retrieve a comprehensive list of all Disks associated with a specific
        connection, <br> including those mapped between CB-Spider and the CSP, <br>
        only registered in CB-Spider's metadata, <br> and only existing in the CSP.
    List-All-Disk-Info:
      method: get
      resourcePath: /alldiskinfo
      description: Retrieve a list of all Disk information associated with all connections.
    List-All-Keypair:
      method: get
      resourcePath: /allkeypair
      description: Retrieve a comprehensive list of all KeyPairs associated with a
        specific connection, <br> including those mapped between CB-Spider and the
        CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Keypair-Info:
      method: get
      resourcePath: /allkeypairinfo
      description: Retrieve a list of KeyPair information associated with all connections.
    List-All-Myimage:
      method: get
      resourcePath: /allmyimage
      description: Retrieve a comprehensive list of all MyImages associated with a
        specific connection, <br> including those mapped between CB-Spider and the
        CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Myimage-Info:
      method: get
      resourcePath: /allmyimageinfo
      description: Retrieve a comprehensive list of all MyImage information associated
        with a specific connection, <br> including those mapped between CB-Spider
        and the CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Nlb:
      method: get
      resourcePath: /allnlb
      description: Retrieve a comprehensive list of all Network Load Balancers (NLBs)
        associated with a specific connection, <br> including those mapped between
        CB-Spider and the CSP, <br> only registered in CB-Spider's metadata, <br>
        and only existing in the CSP.
    List-All-Nlb-Info:
      method: get
      resourcePath: /allnlbinfo
      description: Retrieve a comprehensive list of all Network Load Balancers (NLBs)
        associated with a specific connection, <br> including those mapped between
        CB-Spider and the CSP, <br> only registered in CB-Spider's metadata, <br>
        and only existing in the CSP.
    List-All-Securitygroup:
      method: get
      resourcePath: /allsecuritygroup
      description: Retrieve a comprehensive list of all Security Groups associated
        with a specific connection, <br> including those mapped between CB-Spider
        and the CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Securitygroup-Info:
      method: get
      resourcePath: /allsecuritygroupinfo
      description: Retrieve a list of Security Group information associated with all
        connections.
    List-All-Vm:
      method: get
      resourcePath: /allvm
      description: Retrieve a comprehensive list of all Virtual Machines (VMs) associated
        with a specific connection, <br> including those mapped between CB-Spider
        and the CSP, <br> only registered in CB-Spider's metadata, <br> and only existing
        in the CSP.
    List-All-Vm-Info:
      method: get
      resourcePath: /allvminfo
      description: Retrieve a list of detailed information on all Virtual Machines
        (VMs) associated with a specific connection, <br> including those mapped between
        CB-Spider and the CSP, <br> only registered in CB-Spider's metadata, <br>
        and only existing in the CSP.
    List-All-Vpc:
      method: get
      resourcePath: /allvpc
      description: Retrieve a comprehensive list of all Virtual Private Clouds (VPCs)
        associated with a specific connection, <br> including those mapped between
        CB-Spider and the CSP, <br> only registered in CB-Spider's metadata, <br>
        and only existing in the CSP.
    List-All-Vpc-Info:
      method: get
      resourcePath: /allvpcinfo
      description: Retrieve a comprehensive list of all Virtual Private Clouds (VPCs)
        associated with a specific connection, <br> including those mapped between
        CB-Spider and the CSP, <br> only registered in CB-Spider's metadata, <br>
        and only existing in the CSP.
    List-Cloudos:
      method: get
      resourcePath: /cloudos
      description: Retrieve a list of supported Cloud OS.
    List-Cluster:
      method: get
      resourcePath: /cluster
      description: Retrieve a list of Clusters associated with a specific connection.
    List-Connection-Config:
      method: get
      resourcePath: /connectionconfig
      description: Retrieve a list of registered Connection Configs.
    List-Credential:
      method: get
      resourcePath: /credential
      description: Retrieve a list of registered Credentials.
    List-Disk:
      method: get
      resourcePath: /disk
      description: Retrieve a list of Disks associated with a specific connection.
    List-Driver:
      method: get
      resourcePath: /driver
      description: Retrieve a list of registered Cloud Drivers.
    List-Image:
      method: get
      resourcePath: /vmimage
      description: "Retrieve a list of Public Images associated with a specific connection.
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/How-to-get-Image-List-with-REST-API)]"
    List-Keypair:
      method: get
      resourcePath: /keypair
      description: Retrieve a list of KeyPairs associated with a specific connection.
    List-Myimage:
      method: get
      resourcePath: /myimage
      description: Retrieve a list of MyImages associated with a specific connection.
    List-Nlb:
      method: get
      resourcePath: /nlb
      description: Retrieve a list of Network Load Balancers (NLBs) associated with
        a specific connection.
    List-Org-Region:
      method: get
      resourcePath: /orgregion
      description: Retrieve a list of Original Regions associated with a specific
        connection. <br> The response structure may vary depending on the request
        ConnectionName.
    List-Org-Vm-Spec:
      method: get
      resourcePath: /vmorgspec
      description: Retrieve a list of Original VM Specs associated with a specific
        connection. <br> The response structure may vary depending on the request
        ConnectionName.
    List-Org-Zone:
      method: get
      resourcePath: /orgzone
      description: Retrieve a list of Original Zones associated with a specific connection.
        <br> The response structure may vary depending on the request ConnectionName.
    List-Preconfigured-Original-Org-Region:
      method: get
      resourcePath: /preconfig/orgregion
      description: Retrieve a list of pre-configured Original Regions based on driver
        and credential names. <br> The response structure may vary depending on the
        request DriverName and CredentialName.
    List-Product-Family:
      method: get
      resourcePath: /productfamily/{RegionName}
      description: "Retrieve a list of Product Families associated with a specific
        connection and region. \U0001F577️ [[Concept Guide](https://github.com/cloud-barista/cb-spider/wiki/Price-Info-and-Cloud-Driver-API)],
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/RestAPI-Multi%E2%80%90Cloud-Price-Information-Guide)]"
    List-Region:
      method: get
      resourcePath: /region
      description: Retrieve a list of registered Regions.
    List-Region-Zone:
      method: get
      resourcePath: /regionzone
      description: "Retrieve a list of Region Zones associated with a specific connection.
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/REST-API-Region-Zone-Information-Guide)]"
    List-Region-Zone-Preconfig:
      method: get
      resourcePath: /preconfig/regionzone
      description: "Retrieve a list of pre-configured Region Zones based on driver
        and credential names. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/REST-API-Region-Zone-Information-Guide)]"
    List-Securitygroup:
      method: get
      resourcePath: /securitygroup
      description: Retrieve a list of Security Groups associated with a specific connection.
    List-Tag:
      method: get
      resourcePath: /tag
      description: |-
        Retrieve a list of tags for a specified resource.
        ※ Resource types: VPC, SUBNET, SG, KEY, VM, NLB, DISK, MYIMAGE, CLUSTER
    List-Vm:
      method: get
      resourcePath: /vm
      description: Retrieve a list of Virtual Machines (VMs) associated with a specific
        connection.
    List-Vm-Spec:
      method: get
      resourcePath: /vmspec
      description: "Retrieve a list of VM specs associated with a specific connection.
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#2-vm-spec-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5)]"
    List-Vm-Status:
      method: get
      resourcePath: /vmstatus
      description: Retrieve a list of statuses for Virtual Machines (VMs) associated
        with a specific connection.
    List-Vpc:
      method: get
      resourcePath: /vpc
      description: Retrieve a list of Virtual Private Clouds (VPCs) associated with
        a specific connection.
    List-Vpc-Securitygroup:
      method: get
      resourcePath: /securitygroup/vpc/{VPCName}
      description: Retrieve a list of Security Groups associated with a specific VPC
        in a given cloud connection.
    Register-Cluster:
      method: post
      resourcePath: /regcluster
      description: Register a new Cluster with the specified VPC and CSP ID.
    Register-Credential:
      method: post
      resourcePath: /credential
      description: "Register a new Credential. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#2-cloud-credential-%EC%A0%95%EB%B3%B4-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B4%80%EB%A6%AC)]"
    Register-Disk:
      method: post
      resourcePath: /regdisk
      description: Register a new Disk with the specified name, zone, and CSP ID.
    Register-Driver:
      method: post
      resourcePath: /driver
      description: "Register a new Cloud Driver. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#1-cloud-driver-%EC%A0%95%EB%B3%B4-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B4%80%EB%A6%AC)]"
    Register-Keypair:
      method: post
      resourcePath: /regkeypair
      description: Register a new KeyPair with the specified name and CSP ID.
    Register-Myimage:
      method: post
      resourcePath: /regmyimage
      description: Register a new MyImage with the specified name and CSP ID.
    Register-Nlb:
      method: post
      resourcePath: /regnlb
      description: Register a new Network Load Balancer (NLB) with the specified name
        and CSP ID.
    Register-Region:
      method: post
      resourcePath: /region
      description: "Register a new Region. \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#3-cloud-regionzone-%EC%A0%95%EB%B3%B4-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B4%80%EB%A6%AC)]"
    Register-Securitygroup:
      method: post
      resourcePath: /regsecuritygroup
      description: Register a new Security Group with the specified name and CSP ID.
    Register-Subnet:
      method: post
      resourcePath: /regsubnet
      description: Register a new Subnet within a specified VPC.
    Register-Vm:
      method: post
      resourcePath: /regvm
      description: Register a new Virtual Machine (VM) with the specified name and
        CSP ID.
    Register-Vpc:
      method: post
      resourcePath: /regvpc
      description: Register a new Virtual Private Cloud (VPC) with the specified name
        and CSP ID.
    Remove-Csp-Subnet:
      method: delete
      resourcePath: /vpc/{VPCName}/cspsubnet/{Id}
      description: Remove an existing CSP Subnet from a VPC.
    Remove-Nlb-Vm:
      method: delete
      resourcePath: /nlb/{Name}/vms
      description: Remove a set of VMs from an existing Network Load Balancer (NLB).
    Remove-Nodegroup:
      method: delete
      resourcePath: /cluster/{Name}/nodegroup/{NodeGroupName}
      description: Remove an existing Node Group from a Cluster.
    Remove-Rule:
      method: delete
      resourcePath: /securitygroup/{SGName}/rules
      description: Remove existing rules from a Security Group.
    Remove-Subnet:
      method: delete
      resourcePath: /vpc/{VPCName}/subnet/{SubnetName}
      description: Remove an existing Subnet from a VPC.
    Remove-Tag:
      method: delete
      resourcePath: /tag/{Key}
      description: |-
        Remove a specific tag from a specified resource.
        ※ Resource types: VPC, SUBNET, SG, KEY, VM, NLB, DISK, MYIMAGE, CLUSTER
    Set-Nodegroup-Autoscaling:
      method: put
      resourcePath: /cluster/{Name}/nodegroup/{NodeGroupName}/onautoscaling
      description: Enable or disable auto scaling for a Node Group in a Cluster.
    Start-Vm:
      method: post
      resourcePath: /vm
      description: "Start a new Virtual Machine (VM) with specified configurations.
        \U0001F577️ [[User Guide](https://github.com/cloud-barista/cb-spider/wiki/features-and-usages#2-%EB%A9%80%ED%8B%B0%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-vm-%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%9E%90%EC%9B%90-%EC%A0%9C%EC%96%B4multi-cloud-vm-infra-resource-control)],
        [[Snapshot-MyImage,Disk Guide](https://github.com/cloud-barista/cb-spider/wiki/VM-Snapshot,-MyImage-and-Disk-Overview)]"
    Terminate-Csp-Vm:
      method: delete
      resourcePath: /cspvm/{Id}
      description: Terminate a specified CSP Virtual Machine (VM).
    Terminate-Vm:
      method: delete
      resourcePath: /vm/{Name}
      description: Terminate a specified Virtual Machine (VM).
    Unregister-Cluster:
      method: delete
      resourcePath: /regcluster/{Name}
      description: Unregister a Cluster with the specified name.
    Unregister-Credential:
      method: delete
      resourcePath: /credential/{CredentialName}
      description: Unregister a specific Credential.
    Unregister-Disk:
      method: delete
      resourcePath: /regdisk/{Name}
      description: Unregister a Disk with the specified name.
    Unregister-Driver:
      method: delete
      resourcePath: /driver/{DriverName}
      description: Unregister a specific Cloud Driver.
    Unregister-Keypair:
      method: delete
      resourcePath: /regkeypair/{Name}
      description: Unregister a KeyPair with the specified name.
    Unregister-Myimage:
      method: delete
      resourcePath: /regmyimage/{Name}
      description: Unregister a MyImage with the specified name.
    Unregister-Nlb:
      method: delete
      resourcePath: /regnlb/{Name}
      description: Unregister a Network Load Balancer (NLB) with the specified name.
    Unregister-Region:
      method: delete
      resourcePath: /region/{RegionName}
      description: Unregister a specific Region.
    Unregister-Securitygroup:
      method: delete
      resourcePath: /regsecuritygroup/{Name}
      description: Unregister a Security Group with the specified name.
    Unregister-Subnet:
      method: delete
      resourcePath: /regsubnet/{Name}
      description: Unregister a Subnet from a specified VPC.
    Unregister-Vm:
      method: delete
      resourcePath: /regvm/{Name}
      description: Unregister a Virtual Machine (VM) with the specified name.
    Unregister-Vpc:
      method: delete
      resourcePath: /regvpc/{Name}
      description: Unregister a VPC with the specified name.
    Upgrade-Cluster:
      method: put
      resourcePath: /cluster/{Name}/upgrade
      description: Upgrade a Cluster to a specified version.
    Upload-Driver:
      method: post
      resourcePath: /driver/upload
      description: Upload a Cloud Driver library file.
    Version-Info:
      method: get
      resourcePath: /version
      description: Retrieves the version information of CB-Spider.
  cb-tumblebug:
    AddNLBVMs:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm
      description: Add VMs to NLB
    AnalyzeProvisioningRisk:
      method: get
      resourcePath: /provisioning/risk/{specId}
      description: |-
        Evaluate the likelihood of provisioning failure based on historical data for a specific VM specification and image combination.
        This endpoint provides intelligent risk assessment to help prevent deployment failures:

        **Risk Analysis Factors:**
        - Historical failure rate for the VM specification
        - Image-specific compatibility with the spec
        - Recent failure patterns and trends
        - Cross-reference of spec+image combination success rates

        **Risk Levels:**
        - `high`: Very likely to fail (>80% failure rate or image-specific failures)
        - `medium`: Moderate risk (50-80% failure rate or mixed results)
        - `low`: Low risk (<50% failure rate or no previous failures)
        - `unknown`: Insufficient data for analysis

        **Recommended Actions by Risk Level:**
        - **High Risk**: Consider alternative specs or images, verify CSP quotas and permissions
        - **Medium Risk**: Proceed with caution, have backup plans ready
        - **Low Risk**: Safe to proceed with normal deployment

        **Integration Points:**
        - Automatically called during MCI review process
        - Can be used in CI/CD pipelines for deployment validation
        - Helpful for capacity planning and resource selection
    AnalyzeProvisioningRiskDetailed:
      method: get
      resourcePath: /tumblebug/provisioning/risk/detailed
      description: |-
        Provides comprehensive risk analysis with separate assessments for VM specification and image risks, plus actionable recommendations.
        This endpoint offers enhanced risk analysis by separating spec-level and image-level risk factors:

        **Risk Analysis Breakdown:**
        - **Spec Risk**: Analyzes whether the VM specification itself has compatibility or resource issues
        - **Image Risk**: Evaluates the track record of the specific image with this spec
        - **Overall Risk**: Combines both factors to determine the primary risk source
        - **Recommendations**: Provides actionable guidance based on risk analysis

        **Spec Risk Factors:**
        - Number of different images that failed with this spec (indicates spec-level issues)
        - Overall failure rate across all images
        - Success/failure ratio with various images

        **Image Risk Factors:**
        - Previous success/failure history of this specific image with this spec
        - Whether this is a new, untested combination

        **Recommendation Types:**
        - Change VM specification (when spec is the primary risk factor)
        - Try different image (when image is the primary risk factor)
        - Monitor deployment closely (for new combinations or medium risk)
        - Proceed with confidence (for low-risk combinations)
    CheckHTTPVersion:
      method: get
      resourcePath: /httpVersion
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
    CheckK8sNodeGroupsOnK8sCreation:
      method: get
      resourcePath: /checkK8sNodeGroupsOnK8sCreation
      description: Check whether nodegroups are required during the K8sCluster creation
    CheckK8sNodeImageDesignation:
      method: get
      resourcePath: /checkK8sNodeImageDesignation
      description: Check whether node image designation is possible to create a K8sCluster
    CheckResource:
      method: get
      resourcePath: /ns/{nsId}/checkResource/{resourceType}/{resourceId}
      description: Check resources' existence
    CreateOrUpdateLabel:
      method: put
      resourcePath: /label/{labelType}/{uid}
      description: Create or update a label for a resource identified by its uid
    CreateSharedResource:
      method: post
      resourcePath: /ns/{nsId}/sharedResource
      description: Create shared resources for MC-Infra
    DelAllCustomImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage
      description: Delete all customImages
    DelAllDataDisk:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: Delete all Data Disks
    DelAllImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/image
      description: Delete all images
    DelAllMci:
      method: delete
      resourcePath: /ns/{nsId}/mci
      description: Delete all MCIs
    DelAllMciPolicy:
      method: delete
      resourcePath: /ns/{nsId}/policy/mci
      description: Delete all MCI policies
    DelAllNLB:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: Delete all NLBs
    DelAllNs:
      method: delete
      resourcePath: /ns
      description: Delete all namespaces
    DelAllSecurityGroup:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: Delete all Security Groups
    DelAllSharedResources:
      method: delete
      resourcePath: /ns/{nsId}/sharedResources
      description: Delete all Default Resource Objects in the given namespace
    DelAllSshKey:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey
      description: Delete all SSH Keys
    DelAllVNet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet
      description: Delete all VNets
    DelCustomImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: Delete customImage
    DelDataDisk:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: Delete Data Disk
    DelFirewallRules:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: |-
        Delete specific FirewallRules: Remove specified rules from the Security Group while keeping other existing rules.
        This API will remove only the specified rules from the Security Group, leaving all other rules intact.

        Usage:
        Use this API to remove specific firewall rules from a Security Group. Only the rules matching the provided criteria will be deleted.
        - Rules that exactly match the provided Direction, Protocol, Port, and CIDR will be removed.
        - All other existing rules will remain unchanged.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - "Protocol" can be TCP, UDP, ICMP, ALL, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
    DelImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: Delete image
    DelMci:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}
      description: Delete MCI
    DelMciPolicy:
      method: delete
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: Delete MCI Policy
    DelMciVm:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}
      description: Delete VM in specified MCI
    DelNLB:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}
      description: Delete NLB
    DelNs:
      method: delete
      resourcePath: /ns/{nsId}
      description: Delete namespace
    DelSecurityGroup:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: Delete Security Group
    DelSpec:
      method: delete
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: Delete spec
    DelSshKey:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: Delete SSH Key
    DelSubnet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}
      description: |-
        Delete Subnet
        - refine: delete a subnet `object` if there's no resource on CSP or no inforamation on Spider
        - force: force: delete a subnet `resource` on a CSP regardless of the current resource status (e.g., attempt to delete even if in use)
    DelVNet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: |-
        Delete VNet
        - withsubnets: delete VNet and its subnets
        - refine: delete information of VNet and its subnets if there's no info/resource in Spider/CSP
        - force: delete VNet and its subnets regardless of the status of info/resource in Spider/CSP
    DeleteAllK8sCluster:
      method: delete
      resourcePath: /ns/{nsId}/k8sCluster
      description: Delete all K8sClusters
    DeleteAllRequests:
      method: delete
      resourcePath: /requests
      description: Delete details of all requests
    DeleteDeregisterSubnet:
      method: delete
      resourcePath: /ns/{nsId}/deregisterCspResource/vNet/{vNetId}/subnet/{subnetId}
      description: Deregister Subnet, which was created in CSP
    DeleteDeregisterVNet:
      method: delete
      resourcePath: /ns/{nsId}/deregisterCspResource/vNet/{vNetId}
      description: Deregister the VNet, which was created in CSP
    DeleteK8sCluster:
      method: delete
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}
      description: Delete K8sCluster
    DeleteK8sNodeGroup:
      method: delete
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}
      description: Remove a K8sNodeGroup
    DeleteObject:
      method: delete
      resourcePath: /object
      description: Delete an object
    DeleteObjectStorage:
      method: delete
      resourcePath: /ns/{nsId}/resources/objectStorage/{objectStorageId}
      description: Delete a Object Storage
    DeleteObjects:
      method: delete
      resourcePath: /objects
      description: Delete child objects along with the given object
    DeleteProvisioningLog:
      method: delete
      resourcePath: /provisioning/log/{specId}
      description: |-
        Remove all provisioning history data for a specific VM specification.
        This operation permanently deletes historical failure and success records:

        **Warning**: This action is irreversible and will remove:
        - All failure and success statistics
        - Historical error messages and troubleshooting data
        - Risk analysis baseline for future deployments
        - Failure pattern analysis data

        **When to Use:**
        - **Data Cleanup**: Remove outdated or irrelevant provisioning history
        - **Fresh Start**: Clear history after infrastructure changes that resolve previous issues
        - **Privacy Compliance**: Remove logs containing sensitive error information
        - **Storage Management**: Clean up logs to manage kvstore space

        **Impact on System:**
        - Future risk analysis for this spec will have no historical baseline
        - MCI review process will not show historical warnings for this spec
        - Provisioning reliability metrics will be reset to zero
    DeleteRequest:
      method: delete
      resourcePath: /request/{reqId}
      description: Delete details of a specific request
    DeleteSiteToSiteVpn:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: Delete a site-to-site VPN
    DeleteSqlDb:
      method: delete
      resourcePath: /ns/{nsId}/resources/sqlDb/{sqlDbId}
      description: Delete a SQL datatbase
    FetchImages:
      method: post
      resourcePath: /fetchImages
      description: Fetch images waiting for completion
    FetchImagesAsync:
      method: post
      resourcePath: /fetchImagesAsync
      description: Fetch images in the background without waiting for completion
    FetchPrice:
      method: post
      resourcePath: /fetchPrice
      description: Fetch price from all CSP connections and update the price information
        for associated specs in the system.
    FetchSpecs:
      method: post
      resourcePath: /fetchSpecs
      description: Fetch specs from CSPs and register them in the system.
    FilterSpecsByRange:
      method: post
      resourcePath: /ns/{nsId}/resources/filterSpecsByRange
      description: Filter specs by range. Use limit field to control the maximum number
        of results. If limit is 0 or not specified, returns all matching results.
    ForwardAnyReqToAny:
      method: post
      resourcePath: /forward/{path}
      description: Forward any (GET) request to CB-Spider
    GetAllBenchmark:
      method: post
      resourcePath: /ns/{nsId}/benchmarkAll/mci/{mciId}
      description: Run MCI benchmark for all performance metrics and return results
    GetAllConfig:
      method: get
      resourcePath: /config
      description: List all configs
    GetAllCustomImage:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage
      description: List all customImages or customImages' ID
    GetAllDataDisk:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: List all Data Disks or Data Disks' ID
    GetAllImage:
      method: get
      resourcePath: /ns/{nsId}/resources/image
      description: List all images or images' ID
    GetAllK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/k8sCluster
      description: List all K8sClusters or K8sClusters' ID
    GetAllMci:
      method: get
      resourcePath: /ns/{nsId}/mci
      description: List all MCIs or MCIs' ID
    GetAllMciPolicy:
      method: get
      resourcePath: /ns/{nsId}/policy/mci
      description: List all MCI policies
    GetAllNLB:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: List all NLBs or NLBs' ID
    GetAllNs:
      method: get
      resourcePath: /ns
      description: List all namespaces or namespaces' ID
    GetAllObjectStorage:
      method: get
      resourcePath: /ns/{nsId}/resources/objectStorage
      description: Get all Object Storages (TBD)
    GetAllRequests:
      method: get
      resourcePath: /requests
      description: Get details of all requests with optional filters.
    GetAllSecurityGroup:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: List all Security Groups or Security Groups' ID
    GetAllSiteToSiteVpn:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn
      description: Get all site-to-site VPNs
    GetAllSqlDb:
      method: get
      resourcePath: /ns/{nsId}/resources/sqlDb
      description: Get all SQL Databases (TBD)
    GetAllSshKey:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey
      description: List all SSH Keys or SSH Keys' ID
    GetAllSubnet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet
      description: List all subnets
    GetAllVNet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet
      description: List all VNets or VNets' ID
    GetAvailableK8sNodeImage:
      method: get
      resourcePath: /availableK8sNodeImage
      description: (UNDER DEVELOPMENT!!!) Get available kubernetes cluster node image
    GetAvailableK8sVersion:
      method: get
      resourcePath: /availableK8sVersion
      description: Get available kubernetes cluster version
    GetBastionNodes:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion
      description: Get bastion nodes for a VM
    GetBenchmark:
      method: post
      resourcePath: /ns/{nsId}/benchmark/mci/{mciId}
      description: Run MCI benchmark for a single performance metric and return results
    GetCloudInfo:
      method: get
      resourcePath: /cloudInfo
      description: Get cloud information
    GetConfig:
      method: get
      resourcePath: /config/{configId}
      description: Get config
    GetConnConfig:
      method: get
      resourcePath: /connConfig/{connConfigName}
      description: Get registered ConnConfig info
    GetConnConfigList:
      method: get
      resourcePath: /connConfig
      description: List all registered ConnConfig
    GetControlK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/control/k8sCluster/{k8sClusterId}
      description: Control the creation of K8sCluster (continue, withdraw)
    GetControlMci:
      method: get
      resourcePath: /ns/{nsId}/control/mci/{mciId}
      description: Control the lifecycle of MCI (refine, suspend, resume, reboot,
        terminate)
    GetControlMciVm:
      method: get
      resourcePath: /ns/{nsId}/control/mci/{mciId}/vm/{vmId}
      description: Control the lifecycle of VM (suspend, resume, reboot, terminate)
    GetCustomImage:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: Get customImage
    GetDataDisk:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: Get Data Disk
    GetFetchImagesAsyncResult:
      method: get
      resourcePath: /fetchImagesResult
      description: Get detailed results from the last asynchronous image fetch operation
    GetImage:
      method: get
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: GetImage returns an image object if there are matched images for
        the given namespace and imageKey(Id, CspResourceName)
    GetK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}
      description: Get K8sCluster
    GetK8sClusterInfo:
      method: get
      resourcePath: /k8sClusterInfo
      description: Get kubernetes cluster information
    GetLabels:
      method: get
      resourcePath: /label/{labelType}/{uid}
      description: Get labels for a resource identified by its uid
    GetLatencyBenchmark:
      method: get
      resourcePath: /ns/{nsId}/benchmarkLatency/mci/{mciId}
      description: Run MCI benchmark for network latency
    GetMci:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}
      description: 'Get MCI object (option: status, accessInfo, vmId)'
    GetMciAssociatedResources:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/associatedResources
      description: Get associated resource ID list for a given MCI (VNet, Subnet,
        SecurityGroup, SSHKey, etc.)
    GetMciGroupIds:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup
      description: List SubGroup IDs in a specified MCI
    GetMciGroupVms:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}
      description: List VMs with a SubGroup label in a specified MCI
    GetMciPolicy:
      method: get
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: Get MCI Policy
    GetMciVm:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}
      description: Get VM in specified MCI
    GetMonitorData:
      method: get
      resourcePath: /ns/{nsId}/monitoring/mci/{mciId}/metric/{metric}
      description: Get monitoring data of specified MCI for specified monitoring metric
        (cpu, memory, disk, network)
    GetNLB:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}
      description: Get NLB
    GetNLBHealth:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/healthz
      description: Get NLB Health
    GetNs:
      method: get
      resourcePath: /ns/{nsId}
      description: Get namespace
    GetObject:
      method: get
      resourcePath: /object
      description: Get value of an object
    GetObjectStorage:
      method: get
      resourcePath: /ns/{nsId}/resources/objectStorage/{objectStorageId}
      description: Get resource info of a Object Storage
    GetObjects:
      method: get
      resourcePath: /objects
      description: List all objects for a given key
    GetProviderList:
      method: get
      resourcePath: /provider
      description: List all registered Providers
    GetProvisioningLog:
      method: get
      resourcePath: /provisioning/log/{specId}
      description: |-
        Retrieve detailed provisioning history for a specific VM specification including success/failure patterns and risk analysis.
        This endpoint provides comprehensive insights into provisioning reliability:

        **Historical Data Includes:**
        - Success and failure counts with timestamps
        - CSP-specific error messages and failure patterns
        - Image compatibility tracking across different attempts
        - Failure rate analysis and risk assessment
        - Regional and provider-specific reliability metrics

        **Use Cases:**
        - **Pre-deployment Risk Assessment**: Check if a spec has historical failures before creating MCI
        - **Troubleshooting**: Analyze failure patterns to identify root causes
        - **Capacity Planning**: Understand reliability patterns for different specs and regions
        - **Cost Optimization**: Avoid specs with high failure rates that waste resources

        **Response Details:**
        - `failureCount`: Total number of provisioning failures
        - `successCount`: Number of successes (only tracked after failures occur)
        - `failureImages`: List of CSP images that failed with this spec
        - `successImages`: List of CSP images that succeeded with this spec
        - `failureMessages`: Detailed error messages from CSP
        - `lastUpdated`: Timestamp of most recent provisioning attempt
    GetPublicKeyForCredentialEncryption:
      method: get
      resourcePath: /credential/publicKey
      description: Generates an RSA key pair using a 4096-bit key size with the RSA
        algorithm. The public key is generated using the RSA algorithm with OAEP padding
        and SHA-256 as the hash function. This key is used to encrypt an AES key that
        will be used for hybrid encryption of credentials.
    GetReadyz:
      method: get
      resourcePath: /readyz
      description: Check Tumblebug is ready
    GetRegion:
      method: get
      resourcePath: /provider/{providerName}/region/{regionName}
      description: Get registered region info
    GetRegions:
      method: get
      resourcePath: /provider/{providerName}/region
      description: Get registered region info
    GetRequest:
      method: get
      resourcePath: /request/{reqId}
      description: Get details of a specific request
    GetRequestStatusOfSiteToSiteVpn:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn/{vpnId}/request/{requestId}
      description: Check the status of a specific request by its ID
    GetRequiredK8sSubnetCount:
      method: get
      resourcePath: /requiredK8sSubnetCount
      description: Get the required subnet count to create a K8sCluster
    GetResourcesByLabelSelector:
      method: get
      resourcePath: /resources/{labelType}
      description: |-
        Get resources based on a label selector. The label selector supports the following operators:
        - `=` : Selects resources where the label key equals the specified value (e.g., `env=production`).
        - `!=` : Selects resources where the label key does not equal the specified value (e.g., `tier!=frontend`).
        - `in` : Selects resources where the label key is in the specified set of values (e.g., `region in (us-west, us-east)`).
        - `notin` : Selects resources where the label key is not in the specified set of values (e.g., `env notin (production, staging)`).
        - `exists` : Selects resources where the label key exists (e.g., `env exists`).
        - `!exists` : Selects resources where the label key does not exist (e.g., `env !exists`).
    GetSecurityGroup:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: Get Security Group
    GetSiteToSiteVpn:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: Get resource info of a site-to-site VPN
    GetSitesInMci:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/site
      description: Get sites in MCI
    GetSpec:
      method: get
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: Get spec
    GetSqlDb:
      method: get
      resourcePath: /ns/{nsId}/resources/sqlDb/{sqlDbId}
      description: Get resource info of a SQL datatbase
    GetSshKey:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: Get SSH Key
    GetSubnet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}
      description: Get Subnet
    GetSystemLabelInfo:
      method: get
      resourcePath: /labelInfo
      description: Return LabelTypes and system defined label keys with example
    GetVNet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: Get VNet
    GetVmDataDisk:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: Get available dataDisks for a VM
    InitAllConfig:
      method: delete
      resourcePath: /config
      description: Init all configs
    InitConfig:
      method: delete
      resourcePath: /config/{configId}
      description: Init config
    InspectResources:
      method: post
      resourcePath: /inspectResources
      description: Inspect Resources (vNet, securityGroup, sshKey, vm) registered
        in CB-Tumblebug, CB-Spider, CSP
    InspectResourcesOverview:
      method: get
      resourcePath: /inspectResourcesOverview
      description: Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered
        in CB-Tumblebug and CSP for all connections
    LoadAssets:
      method: get
      resourcePath: /loadAssets
      description: Load Common Resources from internal asset files (Spec, Image)
    LookupImage:
      method: post
      resourcePath: /lookupImage
      description: Lookup image (for debugging purposes)
    LookupImageList:
      method: post
      resourcePath: /lookupImages
      description: Lookup image list (for debugging purposes)
    LookupSpec:
      method: post
      resourcePath: /lookupSpec
      description: Lookup spec (for debugging purposes)
    LookupSpecList:
      method: post
      resourcePath: /lookupSpecs
      description: Lookup spec list (for debugging purposes)
    MergeCSPResourceLabel:
      method: put
      resourcePath: /mergeCSPLabel/{labelType}/{uid}
      description: Fetch the labels in the CSP and merge them with the existing labels
    PostCmdK8sCluster:
      method: post
      resourcePath: /ns/{nsId}/cmd/k8sCluster/{k8sClusterId}
      description: |-
        Send a command to specified Container in K8sCluster
        [note] This feature is not intended for general use
        This API is provided as an exceptional and limited function for specific purposes such as migration.
        Kubernetes resource information required as input for this API is not currently provided, and its availability in the future is uncertain.
    PostCmdMci:
      method: post
      resourcePath: /ns/{nsId}/cmd/mci/{mciId}
      description: Send a command to specified MCI
    PostConfig:
      method: post
      resourcePath: /config
      description: Create or Update config (TB_SPIDER_REST_URL, TB_DRAGONFLY_REST_URL,
        ...)
    PostCustomImage:
      method: post
      resourcePath: /ns/{nsId}/resources/customImage
      description: Register existing Custom Image in a CSP (option=register)
    PostDataDisk:
      method: post
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: Create Data Disk
    PostFileToK8sCluster:
      method: post
      resourcePath: /ns/{nsId}/transferFile/k8sCluster/{k8sClusterId}
      description: |-
        Transfer a file to specified Container in K8sCluster. The tar command is required in the container.
        [note] This feature is not intended for general use
        This API is provided as an exceptional and limited function for specific purposes such as migration.
        Kubernetes resource information required as input for this API is not currently provided, and its availability in the future is uncertain.
    PostFileToMci:
      method: post
      resourcePath: /ns/{nsId}/transferFile/mci/{mciId}
      description: |-
        Transfer a file to specified MCI to the specified path.
        The file size should be less than 10MB.
        Not for gerneral file transfer but for specific purpose (small configuration files).
    PostFirewallRules:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: |-
        Add new FirewallRules: Add the provided firewall rules to the existing rules in the Security Group.
        This API will only add new rules without deleting or modifying existing ones.
        If a rule with identical properties already exists, it will be skipped to avoid duplicates.

        Usage:
        Use this API to add new firewall rules to a Security Group while preserving existing rules.
        - Only new rules that don't already exist will be added.
        - Existing rules remain unchanged.
        - If an identical rule already exists, it will be skipped.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, ALL, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
    PostImage:
      method: post
      resourcePath: /ns/{nsId}/resources/image
      description: Register image
    PostInstallBenchmarkAgentToMci:
      method: post
      resourcePath: /ns/{nsId}/installBenchmarkAgent/mci/{mciId}
      description: Install the benchmark agent to specified MCI
    PostInstallMonitorAgentToMci:
      method: post
      resourcePath: /ns/{nsId}/monitoring/install/mci/{mciId}
      description: Install monitoring agent (CB-Dragonfly agent) to MCI
    PostK8sCluster:
      method: post
      resourcePath: /ns/{nsId}/k8sCluster
      description: Create K8sCluster<br>Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1614
    PostK8sClusterDynamic:
      method: post
      resourcePath: /ns/{nsId}/k8sClusterDynamic
      description: Create K8sCluster Dynamically from common spec and image
    PostK8sClusterDynamicCheckRequest:
      method: post
      resourcePath: /k8sClusterDynamicCheckRequest
      description: Check available ConnectionConfig list before create K8sCluster
        Dynamically from common spec and image
    PostK8sNodeGroup:
      method: post
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup
      description: Add a K8sNodeGroup
    PostK8sNodeGroupDynamic:
      method: post
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroupDynamic
      description: Create K8sNodeGroup Dynamically from common spec and image
    PostMcNLB:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/mcSwNlb
      description: Create a special purpose MCI for NLB and depoly and setting SW
        NLB
    PostMci:
      method: post
      resourcePath: /ns/{nsId}/mci
      description: |-
        Create MCI with detailed VM specifications and resource configuration.
        This endpoint creates a complete multi-cloud infrastructure by:
        1. **VM Provisioning**: Creates VMs across multiple cloud providers using predefined specs and images
        2. **Resource Management**: Automatically handles VPC/VNet, security groups, SSH keys, and network configuration
        3. **Status Tracking**: Monitors VM creation progress and handles failures based on policy settings
        4. **Post-Deployment**: Optionally installs monitoring agents and executes custom commands

        **Key Features:**
        - Multi-cloud VM deployment with heterogeneous configurations
        - Automatic resource dependency management (VPC → Security Group → VM)
        - Built-in failure handling with configurable policies (continue/rollback/refine)
        - Optional CB-Dragonfly monitoring agent installation
        - Post-deployment command execution support
        - Real-time status updates and progress tracking

        **VM Lifecycle:**
        1. Creating → Running (successful deployment)
        2. Creating → Failed (deployment error, handled by failure policy)
        3. Running → Terminated (manual or policy-driven cleanup)

        **Failure Policies:**
        - `continue`: Keep successful VMs, mark failed ones for later refinement
        - `rollback`: Delete entire MCI if any VM fails (all-or-nothing)
        - `refine`: Automatically clean up failed VMs, keep successful ones

        **Resource Requirements:**
        - Valid VM specifications (must exist in system namespace)
        - Valid images (must be available in target CSP regions)
        - Sufficient CSP quotas and permissions
        - Network connectivity between components
    PostMciDynamic:
      method: post
      resourcePath: /ns/{nsId}/mciDynamic
      description: |-
        Create multi-cloud infrastructure dynamically using common specifications and images with automatic resource discovery and optimization.
        This is the **recommended approach** for MCI creation, providing simplified configuration with powerful automation:

        **Dynamic Resource Creation:**
        1. **Automatic Resource Discovery**: Validates and selects optimal VM specifications and images from common namespace
        2. **Intelligent Network Setup**: Creates VNets, subnets, security groups, and SSH keys automatically per provider
        3. **Cross-Cloud Orchestration**: Coordinates VM provisioning across multiple cloud providers simultaneously
        4. **Dependency Management**: Handles resource creation order and inter-dependencies automatically
        5. **Failure Recovery**: Implements configurable failure policies for robust deployment

        **Key Advantages Over Static MCI:**
        - **Simplified Configuration**: Use common spec/image IDs instead of provider-specific resources
        - **Automatic Resource Management**: No need to pre-create VNets, security groups, or SSH keys
        - **Multi-Cloud Optimization**: Intelligent placement and configuration across providers
        - **Built-in Best Practices**: Security groups, network isolation, and access controls applied automatically
        - **Scalable Architecture**: Supports large-scale deployments with optimized resource utilization

        **Configuration Process:**
        1. **Resource Discovery**: Use `/recommendSpec` to find suitable VM specifications
        2. **Image Selection**: Use system namespace to discover compatible images
        3. **Request Validation**: Use `/mciDynamicCheckRequest` to validate configuration before deployment
        4. **Optional Preview**: Use `/mciDynamicReview` to estimate costs and review configuration
        5. **Deployment**: Submit MCI dynamic request with failure policy and deployment options

        **Failure Policies (PolicyOnPartialFailure):**
        - **`continue`** (default): Create MCI with successful VMs, failed VMs remain for manual refinement
        - **`rollback`**: Delete entire MCI if any VM fails (all-or-nothing deployment)
        - **`refine`**: Automatically clean up failed VMs, keep successful ones (recommended for large deployments)

        **Deployment Options:**
        - **`hold`**: Create MCI object but hold VM provisioning for manual approval
        - **Normal**: Proceed with immediate VM provisioning after resource creation

        **Multi-Cloud Example Configuration:**
        ```json
        {
        "name": "multi-cloud-web-tier",
        "description": "Web application across AWS, Azure, and GCP",
        "policyOnPartialFailure": "refine",
        "vm": [
        {
        "name": "aws-web-servers",
        "subGroupSize": "3",
        "specId": "aws+us-east-1+t3.medium",
        "imageId": "ami-0abcdef1234567890",
        "rootDiskSize": "100",
        "label": {"tier": "web", "provider": "aws"}
        },
        {
        "name": "azure-api-servers",
        "subGroupSize": "2",
        "specId": "azure+eastus+Standard_B2s",
        "imageId": "Canonical:0001-com-ubuntu-server-jammy:22_04-lts",
        "label": {"tier": "api", "provider": "azure"}
        }
        ]
        }
        ```

        **Performance Considerations:**
        - VM provisioning occurs in parallel across providers
        - Network resources are created concurrently where possible
        - Large deployments (>10 VMs) automatically use optimized batching
        - Built-in rate limiting prevents CSP API throttling

        **Monitoring and Post-Deployment:**
        - Optional CB-Dragonfly monitoring agent installation
        - Custom post-deployment command execution
        - Real-time status tracking and progress updates
        - Automatic resource labeling and metadata management
    PostMciDynamicCheckRequest:
      method: post
      resourcePath: /mciDynamicCheckRequest
      description: |-
        Validate resource availability and discover optimal connection configurations before creating MCI dynamically.
        This endpoint provides comprehensive resource validation and connection discovery for MCI planning:

        **Resource Validation Process:**
        1. **Specification Analysis**: Validates that requested common specs exist and are accessible
        2. **Provider Discovery**: Identifies available cloud providers and regions for each specification
        3. **Connectivity Assessment**: Tests connection configurations and CSP API accessibility
        4. **Quota Verification**: Checks available quotas and resource limits where possible
        5. **Compatibility Matrix**: Generates matrix of viable spec-provider-region combinations

        **Connection Configuration Discovery:**
        - **Available Providers**: Lists all configured cloud providers (AWS, Azure, GCP, etc.)
        - **Active Regions**: Shows available regions per provider with connectivity status
        - **Specification Mapping**: Maps common specs to provider-specific instance types
        - **Image Compatibility**: Validates image availability across different providers/regions
        - **Network Capabilities**: Identifies supported network features and configurations

        **Pre-Deployment Validation:**
        - **Resource Existence**: Confirms all specified resources exist in system namespace
        - **Permission Verification**: Validates CSP credentials and required permissions
        - **API Connectivity**: Tests connection to CSP APIs and service endpoints
        - **Dependency Resolution**: Identifies any missing dependencies or prerequisites

        **Optimization Recommendations:**
        - **Cost-Effective Regions**: Suggests regions with lower pricing for specified resources
        - **Performance Optimization**: Recommends regions with better network performance
        - **Availability Zone**: Identifies optimal AZ distribution for high availability
        - **Resource Bundling**: Suggests efficient resource combinations and groupings

        **Output Information:**
        - **Connection Candidates**: List of viable connection configurations
        - **Provider Capabilities**: Detailed capabilities matrix per provider
        - **Resource Status**: Real-time availability status for each requested resource
        - **Recommendation Summary**: Actionable recommendations for optimal deployment

        **Use Cases:**
        - Pre-validate MCI configuration before expensive deployment operations
        - Discover optimal provider/region combinations for cost or performance
        - Troubleshoot resource availability issues during MCI planning
        - Generate connection configuration templates for standardized deployments
        - Assess infrastructure capacity and planning constraints

        **Integration Workflow:**
        1. Use this endpoint to validate and discover connection options
        2. Review recommendations and adjust specifications if needed
        3. Use `/mciDynamicReview` for detailed cost estimation and final validation
        4. Proceed with `/mciDynamic` using validated configuration
    PostMciDynamicReview:
      method: post
      resourcePath: /ns/{nsId}/mciDynamicReview
      description: |-
        Review and validate MCI dynamic request comprehensively before actual provisioning.
        This endpoint performs comprehensive validation of MCI dynamic creation requests without actually creating resources.
        It checks resource availability, validates specifications and images, estimates costs, and provides detailed recommendations.

        **Key Features:**
        - Validates all VM specifications and images against CSP availability
        - Provides cost estimation (including partial estimates when some costs are unknown)
        - Identifies potential configuration issues and warnings
        - Recommends optimization strategies
        - Shows provider and region distribution
        - Non-invasive validation (no resources are created)

        **Review Status:**
        - `Ready`: All VMs can be created successfully
        - `Warning`: VMs can be created but with configuration warnings
        - `Error`: Critical errors prevent MCI creation

        **Use Cases:**
        - Pre-validation before expensive MCI creation
        - Cost estimation and planning
        - Configuration optimization
        - Multi-cloud resource planning
    PostMciPolicy:
      method: post
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: Create MCI Automation policy
    PostMciSubGroupScaleOut:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}
      description: |-
        Horizontally scale an existing VM subgroup by adding more identical instances for increased capacity.
        This endpoint provides elastic scaling capabilities for running application tiers:

        **Scale-Out Process:**
        1. **SubGroup Validation**: Verifies target subgroup exists and is in scalable state
        2. **Template Replication**: Uses existing VM configuration as template for new instances
        3. **Resource Allocation**: Ensures sufficient CSP quotas and network resources
        4. **Parallel Deployment**: Deploys multiple new VMs simultaneously for faster scaling
        5. **Integration**: Seamlessly integrates new VMs into existing subgroup and MCI

        **Configuration Inheritance:**
        - **VM Specifications**: New VMs inherit exact specifications from existing subgroup members
        - **Network Settings**: Automatically placed in same VNet, subnet, and security groups
        - **SSH Keys**: Use same SSH key pairs for consistent access management
        - **Monitoring**: Inherit monitoring agent configuration and policies
        - **Labels and Metadata**: Propagate all labels and metadata from parent subgroup

        **Scaling Scenarios:**
        - **Traffic Spikes**: Quickly add capacity during high-demand periods
        - **Seasonal Scaling**: Scale out for predictable demand increases
        - **Performance Optimization**: Add instances to reduce per-VM resource utilization
        - **Geographic Expansion**: Scale existing workloads to handle broader user base
        - **Fault Tolerance**: Increase redundancy by adding more instances

        **Intelligent Scaling:**
        - **Sequential Naming**: New VMs follow established naming pattern (e.g., web-4, web-5, web-6)
        - **Load Distribution**: New VMs are distributed optimally across availability zones
        - **Resource Efficiency**: Reuses existing network and security infrastructure
        - **Minimal Disruption**: Scaling occurs without affecting existing VM operations
        - **Consistent Configuration**: Ensures all VMs in subgroup remain homogeneous

        **Operational Benefits:**
        - **Zero Downtime**: Existing VMs continue running during scale-out operation
        - **Immediate Availability**: New VMs are ready for traffic as soon as deployment completes
        - **Unified Management**: All VMs (old and new) managed through single subgroup
        - **Policy Consistency**: All scaling and management policies apply uniformly
        - **Monitoring Integration**: New VMs automatically included in existing monitoring dashboards

        **Scale-Out Considerations:**
        - **CSP Quotas**: Verifies sufficient instance, network, and storage quotas
        - **Region Capacity**: Ensures target region has capacity for requested instance types
        - **Network Limits**: Validates that VNet can accommodate additional VMs
        - **Cost Impact**: Additional VMs incur proportional CSP billing costs
        - **Application Readiness**: Applications should be designed to handle additional instances

        **Post-Scale Operations:**
        - New VMs immediately participate in subgroup operations
        - Can be individually managed while maintaining subgroup membership
        - Support for further scaling operations (scale-out or scale-in)
        - Ready for application deployment and load balancer integration

        **Best Practices:**
        - Monitor application performance before and after scaling
        - Ensure load balancers are configured to include new instances
        - Verify application clustering and session management handle new instances
        - Consider database connection limits and other resource constraints
    PostMciVm:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm
      description: |-
        Create and add a group of identical virtual machines (subgroup) to an existing MCI using detailed specifications.
        This endpoint provides precise control over VM configuration and placement within existing infrastructure:

        **SubGroup Creation Process:**
        1. **MCI Integration**: Validates target MCI exists and can accommodate new VMs
        2. **Resource Validation**: Verifies all specified resources (specs, images, networks) exist and are accessible
        3. **Homogeneous Deployment**: Creates multiple identical VMs with consistent configuration
        4. **Network Integration**: Integrates new VMs with existing MCI networking and security policies
        5. **Group Management**: Establishes subgroup for collective management and operations

        **Detailed Configuration Control:**
        - **Specific Resource References**: Uses exact resource IDs rather than common specifications
        - **Network Placement**: Precise control over VNet, subnet, and security group assignment
        - **Storage Configuration**: Detailed disk configuration including type, size, and performance tiers
        - **Instance Customization**: Full control over VM specifications, images, and metadata
        - **Security Settings**: Explicit security group and SSH key configuration

        **SubGroup Benefits:**
        - **Collective Operations**: Perform operations on entire subgroup simultaneously
        - **Homogeneous Scaling**: All VMs in subgroup share identical configuration
        - **Simplified Management**: Single configuration template for multiple VMs
        - **Consistent Naming**: Automatic sequential naming (e.g., web-1, web-2, web-3)
        - **Group Policies**: Apply scaling, monitoring, and lifecycle policies at subgroup level

        **Use Cases:**
        - **Application Tiers**: Deploy multiple instances of web servers, application servers, or databases
        - **Load Distribution**: Create multiple identical VMs for load balancing scenarios
        - **High Availability**: Deploy redundant instances across availability zones
        - **Batch Processing**: Create worker nodes for distributed computing workloads
        - **Development Environments**: Provision identical development or testing instances

        **Configuration Requirements:**
        - **Resource IDs**: Must specify exact resource identifiers (not common specs)
        - **Network Configuration**: VNet, subnet, and security group must exist and be compatible
        - **SSH Keys**: Must specify valid SSH key pairs for access management
        - **Image Compatibility**: Specified image must be available in target region
        - **Quota Validation**: Sufficient CSP quotas must be available for all requested VMs

        **SubGroup Size Considerations:**
        - **Small Groups (1-5 VMs)**: Fast deployment, minimal resource contention
        - **Medium Groups (6-20 VMs)**: Optimized parallel deployment with resource batching
        - **Large Groups (21+ VMs)**: Advanced deployment strategies to avoid CSP rate limits
        - **Resource Limits**: Respects CSP quotas and CB-Tumblebug configuration limits

        **Post-Deployment Integration:**
        - SubGroup becomes integral part of parent MCI
        - All VMs inherit MCI-level monitoring and management policies
        - Can be scaled out further or individual VMs can be managed separately
        - Supports all standard CB-Tumblebug VM lifecycle operations
    PostMciVmDynamic:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vmDynamic
      description: |-
        Dynamically add new virtual machines to an existing MCI using common specifications and automated resource management.
        This endpoint provides elastic scaling capabilities for running MCIs:

        **Dynamic VM Addition Process:**
        1. **MCI Validation**: Verifies target MCI exists and is in a valid state for expansion
        2. **Resource Discovery**: Resolves common spec and image to provider-specific resources
        3. **Network Integration**: Automatically configures new VMs to use existing MCI network resources
        4. **Subgroup Management**: Creates new subgroups or expands existing ones based on configuration
        5. **Status Synchronization**: Updates MCI status and metadata to reflect new VM additions

        **Integration with Existing Infrastructure:**
        - **Network Reuse**: New VMs automatically join existing VNets and security groups
        - **SSH Key Sharing**: Uses existing SSH keys for consistent access management
        - **Monitoring Integration**: New VMs inherit monitoring configuration from parent MCI
        - **Label Propagation**: Applies MCI-level labels and policies to new VMs
        - **Resource Consistency**: Maintains naming conventions and resource organization

        **Scaling Scenarios:**
        - **Horizontal Scaling**: Add more instances to handle increased workload
        - **Multi-Region Expansion**: Deploy VMs in new regions while maintaining MCI cohesion
        - **Provider Diversification**: Add VMs from different cloud providers for redundancy
        - **Workload Specialization**: Deploy VMs with different specifications for specific tasks

        **Configuration Requirements:**
        - `specId`: Must specify valid VM specification from system namespace
        - `imageId`: Must specify valid image compatible with target provider/region
        - `name`: Becomes subgroup name; VMs will be named with sequential suffixes
        - `subGroupSize`: Number of identical VMs to create (default: 1)

        **Network and Security:**
        - New VMs automatically inherit security group rules from existing MCI
        - Network connectivity to existing VMs is established automatically
        - Firewall rules and access policies are applied consistently
        - SSH access is configured using existing key pairs

        **Example Use Cases:**
        - Scale out web tier during traffic spikes
        - Add GPU instances for machine learning workloads
        - Deploy edge nodes in additional geographic regions
        - Add specialized storage or database nodes to existing application stack

        **Post-Addition Operations:**
        - New VMs are immediately available for standard MCI operations
        - Can be individually managed or grouped with existing subgroups
        - Monitoring and logging are automatically configured
        - Application deployment and configuration management can proceed immediately
    PostMciVmSnapshot:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/snapshot
      description: Snapshot VM and create a Custom Image Object using the Snapshot
    PostNLB:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: Create NLB
    PostNs:
      method: post
      resourcePath: /ns
      description: Create namespace
    PostObjectStorage:
      method: post
      resourcePath: /ns/{nsId}/resources/objectStorage
      description: |
        Create a Object Storages

        Supported CSPs: AWS, Azure
        - Note - `connectionName` example: aws-ap-northeast-2, azure-koreacentral

        - Note - Please check the `requiredCSPResource` property which includes CSP specific values.

        - Note - You can find the API usage examples on this link, https://github.com/cloud-barista/mc-terrarium/discussions/117
    PostRegisterCSPNativeVM:
      method: post
      resourcePath: /ns/{nsId}/registerCspVm
      description: |-
        Import and register pre-existing virtual machines from cloud service providers into CB-Tumblebug management.
        This endpoint allows you to bring existing CSP resources under CB-Tumblebug control without recreating them:

        **Registration Process:**
        1. **Discovery**: Validates that the specified VM exists in the target CSP
        2. **Metadata Import**: Retrieves VM configuration, network settings, and current status
        3. **Resource Mapping**: Creates CB-Tumblebug resource objects that reference the existing CSP resources
        4. **Status Synchronization**: Aligns CB-Tumblebug status with actual CSP VM state
        5. **Management Integration**: Enables CB-Tumblebug operations on the registered VMs

        **Supported VM States:**
        - Running VMs (most common use case)
        - Stopped VMs (will be registered with current state)
        - VMs with attached storage and network interfaces

        **Resource Compatibility:**
        - VM must exist in a supported CSP (AWS, Azure, GCP, etc.)
        - Network resources (VPC, subnets, security groups) will be discovered and mapped
        - Storage volumes and attached disks will be registered automatically
        - SSH keys and security configurations will be imported

        **Post-Registration Capabilities:**
        - Standard CB-Tumblebug VM lifecycle operations (start, stop, terminate)
        - Monitoring agent installation (if CB-Dragonfly is configured)
        - Command execution and automation
        - Integration with other CB-Tumblebug MCIs

        **Important Notes:**
        - Registration does not modify the existing VM configuration
        - Original CSP billing and resource management still applies
        - CB-Tumblebug provides additional management layer and automation
        - Ensure proper CSP credentials and permissions are configured
    PostRegisterSubnet:
      method: post
      resourcePath: /ns/{nsId}/registerCspResource/vNet/{vNetId}/subnet
      description: Register Subnet, which was created in CSP
    PostRegisterVNet:
      method: post
      resourcePath: /ns/{nsId}/registerCspResource/vNet
      description: Register the VNet, which was created in CSP
    PostSecurityGroup:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: Create Security Group
    PostSiteToSiteVpn:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn
      description: |-
        Create a site-to-site VPN

        The supported CSP sets are as follows:

        - AWS and one of CSPs in Azure, GCP, Alibaba, Tencent, and IBM

        - Note: It will take about `15 ~ 45 minutes`.
    PostSpec:
      method: post
      resourcePath: /ns/{nsId}/resources/spec
      description: Register spec
    PostSqlDb:
      method: post
      resourcePath: /ns/{nsId}/resources/sqlDb
      description: |
        Create a SQL Databases

        Supported CSPs: AWS, Azure, GCP, NCP
        - Note - `connectionName` example: aws-ap-northeast-2, azure-koreacentral, gcp-asia-northeast3, ncp-kr

        - Note - Please check the `requiredCSPResource` property which includes CSP specific values.

        - Note - You can find the API usage examples on this link, https://github.com/cloud-barista/mc-terrarium/discussions/110
    PostSshKey:
      method: post
      resourcePath: /ns/{nsId}/resources/sshKey
      description: Create SSH Key
    PostSubnet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet
      description: Create Subnet
    PostSystemMci:
      method: post
      resourcePath: /systemMci
      description: |-
        Create specialized MCI instances for CB-Tumblebug system operations and infrastructure probing.
        This endpoint provisions system-level infrastructure that supports CB-Tumblebug's internal functions:

        **System MCI Types:**
        - `probe`: Creates lightweight VMs for network connectivity testing and CSP capability discovery
        - `monitor`: Deploys monitoring infrastructure for system health and performance tracking
        - `test`: Provisions test environments for validating CSP integrations and features

        **Probe MCI Features:**
        - **Connectivity Testing**: Validates network paths between different CSP regions
        - **Latency Measurement**: Measures inter-region and inter-provider network performance
        - **Feature Discovery**: Tests CSP-specific capabilities and service availability
        - **Resource Validation**: Verifies that CB-Tumblebug can successfully provision resources

        **System Namespace:**
        - All system MCIs are created in the special `system` namespace
        - Isolated from user workloads and regular MCI operations
        - Managed automatically by CB-Tumblebug internal processes
        - May be used for background maintenance and monitoring tasks

        **Automatic Configuration:**
        - Uses optimized VM specifications for system tasks (typically minimal resources)
        - Automatically selects appropriate regions and providers based on probe requirements
        - Configures necessary network access and security policies
        - Deploys with minimal attack surface and security hardening

        **Lifecycle Management:**
        - System MCIs may be automatically created, updated, or destroyed by CB-Tumblebug
        - Typically short-lived for specific system tasks
        - Resource cleanup is handled automatically
        - Status and results are logged for system administrators

        **Use Cases:**
        - Infrastructure health checks and validation
        - Performance benchmarking across cloud providers
        - Automated testing of new CSP integrations
        - Network topology discovery and optimization
    PostTestStreamResponse:
      method: post
      resourcePath: /testStreamResponse
      description: Receives a number and streams the decrementing number every second
        until zero
    PostUtilToDesignNetwork:
      method: post
      resourcePath: /util/net/design
      description: Design a hierarchical network configuration of a VPC network or
        multi-cloud network consisting of multiple VPC networks
    PostUtilToDesignVNet:
      method: post
      resourcePath: /util/vNet/design
      description: Design VNet and subnets based on user-friendly properties
    PostUtilToValidateNetwork:
      method: post
      resourcePath: /util/net/validate
      description: Validate a hierarchical configuration of a VPC network or multi-cloud
        network consisting of multiple VPC networks
    PostVNet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet
      description: Create a new VNet
    PostVmDataDisk:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: Provisioning (Create and attach) dataDisk
    PutChangeK8sNodeGroupAutoscaleSize:
      method: put
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}/autoscaleSize
      description: Change a K8sNodeGroup's Autoscale Size
    PutDataDisk:
      method: put
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: Upsize Data Disk
    PutImage:
      method: put
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: Update image
    PutMciAssociatedSecurityGroups:
      method: put
      resourcePath: /ns/{nsId}/mci/{mciId}/associatedSecurityGroups
      description: |-
        Update all Security Groups associated with a given MCI. The firewall rules of all Security Groups will be synchronized to match the requested set.
        Update all Security Groups associated with a given MCI. The firewall rules of all associated Security Groups will be synchronized to match the requested set.

        This API will add missing rules and delete extra rules so that each Security Group's rules become identical to the requested set.
        Only firewall rules are updated; other metadata (name, description, etc.) is not changed.

        Usage:
        Use this API to update (synchronize) the firewall rules of all Security Groups associated with the specified MCI. The rules in the request body will become the only rules in each Security Group after the operation.
        - All existing rules not present in the request will be deleted.
        - All rules in the request that do not exist will be added.
        - If a rule exists but differs in CIDR or port range, it will be replaced.
        - Special protocols (ICMP, etc.) are handled in the same way.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
        - All existing rules not in the request (including default ICMP, etc.) will be deleted.
        - Metadata (name, description, etc.) is not changed.
    PutMonitorAgentStatusInstalled:
      method: put
      resourcePath: /ns/{nsId}/monitoring/status/mci/{mciId}/vm/{vmId}
      description: Set monitoring agent (CB-Dragonfly agent) installation status installed
        (for Windows VM only)
    PutNs:
      method: put
      resourcePath: /ns/{nsId}
      description: Update namespace
    PutSecurityGroup:
      method: put
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: |-
        Update Security Group: Synchronize the firewall rules of the specified Security Group to match the requested list exactly.
        This API will add missing rules and delete extra rules so that the Security Group's rules become identical to the requested set.
        Only firewall rules are updated; other metadata (name, description, etc.) is not changed.

        Usage:
        Use this API to update (synchronize) the firewall rules of a Security Group. The rules in the request body will become the only rules in the Security Group after the operation.
        - All existing rules not present in the request will be deleted.
        - All rules in the request that do not exist will be added.
        - If a rule exists but differs in CIDR or port range, it will be replaced.
        - Special protocols (ICMP, etc.) are handled in the same way.

        Notes:
        - "Ports" field supports single port ("22"), port range ("80-100"), and multiple ports/ranges ("22,80-100,443").
        - The valid port number range is 0 to 65535 (inclusive).
        - "Protocol" can be TCP, UDP, ICMP, etc. (as supported by the cloud provider).
        - "Direction" must be either "inbound" or "outbound".
        - "CIDR" is the allowed IP range.
        - All existing rules not in the request (including default ICMP, etc.) will be deleted.
        - Metadata (name, description, etc.) is not changed.
    PutSetK8sNodeGroupAutoscaling:
      method: put
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/k8sNodeGroup/{k8sNodeGroupName}/onAutoscaling
      description: Set a K8sNodeGroup's Autoscaling On/Off
    PutSpec:
      method: put
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: Update spec
    PutSshKey:
      method: put
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: Update SSH Key
    PutUpgradeK8sCluster:
      method: put
      resourcePath: /ns/{nsId}/k8sCluster/{k8sClusterId}/upgrade
      description: Upgrade a K8sCluster's version
    PutVmDataDisk:
      method: put
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: Attach/Detach available dataDisk
    RecommendK8sNode:
      method: post
      resourcePath: /k8sClusterRecommendNode
      description: Recommend K8sCluster's Node plan (filter and priority) Find details
        from https://github.com/cloud-barista/cb-tumblebug/discussions/1234
    RecommendSpec:
      method: post
      resourcePath: /recommendSpec
      description: |-
        Recommend specs for configuring an infrastructure (filter and priority)
        Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1234
        Get available options by /recommendSpecOptions for filtering and prioritizing specs in RecommendSpec API
    RecommendSpecOptions:
      method: get
      resourcePath: /recommendSpecOptions
      description: Get available options for filtering and prioritizing specs in RecommendSpec
        API
    RecordProvisioningEvent:
      method: post
      resourcePath: /provisioning/event
      description: |-
        Manually record a provisioning success or failure event for historical tracking and analysis.
        This endpoint allows external systems or manual processes to contribute to provisioning history:

        **Use Cases:**
        - **External Provisioning Tools**: Record events from non-CB-Tumblebug provisioning systems
        - **Manual Testing**: Log results from manual deployment tests
        - **Migration**: Import historical data from other systems
        - **Integration**: Connect with CI/CD pipelines for comprehensive tracking

        **Event Types:**
        - **Success Events**: Only recorded if previous failures exist for the spec
        - **Failure Events**: Always recorded to build failure pattern database

        **Data Quality:**
        - Provide accurate timestamps for proper chronological analysis
        - Include detailed error messages for failure events
        - Use consistent spec ID and image name formats

        **Impact on System:**
        - Contributes to risk analysis algorithms
        - Affects future MCI review recommendations
        - Builds historical baseline for reliability metrics
    RegisterCredential:
      method: post
      resourcePath: /credential
      description: This API registers credential information using hybrid encryption.
        The process involves compressing and encrypting sensitive data with AES-256,
        encrypting the AES key with a 4096-bit RSA public key (retrieved via `GET
        /credential/publicKey`), and using OAEP padding with SHA-256. All values,
        including the AES key, must be base64 encoded before sending, and the public
        key token ID must be included in the request.
    RegisterCspNativeResources:
      method: post
      resourcePath: /registerCspResources
      description: Register CSP Native Resources (vNet, securityGroup, sshKey, vm)
        to CB-Tumblebug
    RegisterCspNativeResourcesAll:
      method: post
      resourcePath: /registerCspResourcesAll
      description: Register CSP Native Resources (vNet, securityGroup, sshKey, vm)
        from all Clouds to CB-Tumblebug
    RemoveBastionNodes:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/bastion/{bastionVmId}
      description: Remove a bastion VM from all vNets
    RemoveLabel:
      method: delete
      resourcePath: /label/{labelType}/{uid}/{key}
      description: Remove a label from a resource identified by its uid
    RemoveNLBVMs:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm
      description: Delete VMs from NLB
    RetrieveRegionListFromCsp:
      method: get
      resourcePath: /regionFromCsp
      description: RetrieveR all region lists from CSPs
    SearchImage:
      method: post
      resourcePath: /ns/{nsId}/resources/searchImage
      description: Search image
    SearchImageOptions:
      method: get
      resourcePath: /ns/{nsId}/resources/searchImageOptions
      description: Get all available options for image search fields
    SetBastionNodes:
      method: put
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion/{bastionVmId}
      description: Set bastion nodes for a VM
    TestJWTAuth:
      method: get
      resourcePath: /auth/test
      description: Test JWT authentication
    UpdateImagesFromAsset:
      method: post
      resourcePath: /updateImagesFromAsset
      description: Update image information based on the cloudimage.csv asset file
  cm-ant:
    AntServerReadiness:
      method: get
      resourcePath: /readyz
      description: This endpoint checks if the CB-Ant API server is ready by verifying
        the status of both the load service and the cost service. If either service
        is unavailable, it returns a 503 status indicating the server is not ready.
    CreateLoadTestScenarioCatalog:
      method: post
      resourcePath: /api/v1/load/templates/test-scenario-catalogs
      description: Create a new load test scenario catalog template with the provided
        configuration.
    DeleteLoadTestScenarioCatalog:
      method: delete
      resourcePath: /api/v1/load/templates/test-scenario-catalogs/{id}
      description: Delete a load test scenario catalog by ID.
    GetAllLoadGeneratorInstallInfo:
      method: get
      resourcePath: /api/v1/load/generators
      description: Retrieve a list of all installed load generators with pagination
        support.
    GetAllLoadTestExecutionInfos:
      method: get
      resourcePath: /api/v1/load/tests/infos
      description: Retrieve a list of all load test execution information with pagination
        support.
    GetAllLoadTestExecutionState:
      method: get
      resourcePath: /api/v1/load/tests/state
      description: Retrieve a list of all load test execution states with pagination
        support.
    GetAllLoadTestScenarioCatalogs:
      method: get
      resourcePath: /api/v1/load/templates/test-scenario-catalogs
      description: Retrieve a list of all load test scenario catalogs with pagination
        support.
    GetAllMonitoringAgentInfos:
      method: get
      resourcePath: /api/v1/load/monitoring/agent
      description: Retrieve monitoring agent information based on specified criteria.
    GetEstimateCost:
      method: get
      resourcePath: /api/v1/cost/estimate
      description: Fetch estimated cost details based on provider, region, instance
        type, and resource specifications. Pagination support is provided through
        `Page` and `Size` parameters.
    GetEstimateForecastCost:
      method: get
      resourcePath: /api/v1/cost/estimate/forecast
      description: Fetch estimated forecast cost data based on specified parameters,
        including a date range that must be within 6 months. Supports pagination and
        filtering by namespace IDs, migration configuration IDs, and resource types.
    GetLastLoadTestExecutionState:
      method: get
      resourcePath: /api/v1/load/tests/state/last
      description: Retrieve a last load test execution state by given ids.
    GetLastLoadTestMetrics:
      method: get
      resourcePath: /api/v1/load/tests/result/metrics/last
      description: Retrieve last load test metrics based on provided parameters.
    GetLastLoadTestResult:
      method: get
      resourcePath: /api/v1/load/tests/result/last
      description: Retrieve last load test result based on provided parameters.
    GetLoadTestExecutionInfo:
      method: get
      resourcePath: /api/v1/load/tests/infos/{loadTestKey}
      description: Retrieve the load test execution state information for a specific
        load test key.
    GetLoadTestExecutionState:
      method: get
      resourcePath: /api/v1/load/tests/state/{loadTestKey}
      description: Retrieve a load test execution state by load test key.
    GetLoadTestMetrics:
      method: get
      resourcePath: /api/v1/load/tests/result/metrics
      description: Retrieve load test metrics based on provided parameters.
    GetLoadTestResult:
      method: get
      resourcePath: /api/v1/load/tests/result
      description: Retrieve load test result based on provided parameters.
    GetLoadTestScenarioCatalog:
      method: get
      resourcePath: /api/v1/load/templates/test-scenario-catalogs/{id}
      description: Retrieve a specific load test scenario catalog by ID.
    InstallLoadGenerator:
      method: post
      resourcePath: /api/v1/load/generators
      description: Install a load generator either locally or remotely.
    InstallMonitoringAgent:
      method: post
      resourcePath: /api/v1/load/monitoring/agent/install
      description: Install a monitoring agent on specific mci.
    RunLoadTest:
      method: post
      resourcePath: /api/v1/load/tests/run
      description: Start a load test using the provided load test configuration.
    StopLoadTest:
      method: post
      resourcePath: /api/v1/load/tests/stop
      description: Stop a running load test using the provided load test key.
    UninstallLoadGenerator:
      method: delete
      resourcePath: /api/v1/load/generators/{loadGeneratorInstallInfoId}
      description: Uninstall a previously installed load generator.
    UninstallMonitoringAgent:
      method: post
      resourcePath: /api/v1/load/monitoring/agent/uninstall
      description: Uninstall monitoring agents from specified VMs or all VMs in an
        mci.
    UpdateAndGetEstimateCost:
      method: post
      resourcePath: /api/v1/cost/estimate
      description: Update the estimate cost based on provided specifications and retrieve
        the updated cost estimation. Required fields for each specification include
        `ProviderName`, `RegionName`, and `InstanceType`. Specifications can also
        be provided in a formatted string using `+` delimiter.
    UpdateEstimateForecastCost:
      method: post
      resourcePath: /api/v1/cost/estimate/forecast
      description: Update and retrieve forecasted cost estimates for a specified namespace
        and migration configuration ID over the past 14 days.
    UpdateEstimateForecastCostRaw:
      method: post
      resourcePath: /api/v1/cost/estimate/forecast/raw
      description: Update and retrieve raw forecasted cost estimates for specified
        cost resources and additional AWS information over the past 14 days.
    UpdateLoadTestScenarioCatalog:
      method: put
      resourcePath: /api/v1/load/templates/test-scenario-catalogs/{id}
      description: Update an existing load test scenario catalog with the provided
        configuration.
  cm-beetle:
    CheckHTTPVersion:
      method: get
      resourcePath: /httpVersion
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
    CreateMigratedSSHKey:
      method: post
      resourcePath: /migration/ns/{nsId}/resources/sshKey
      description: Create a new migrated SSH key in the namespace
    CreateMigratedSecurityGroup:
      method: post
      resourcePath: /migration/ns/{nsId}/resources/securityGroup
      description: Create a new migrated security group in the namespace
    CreateVNet:
      method: post
      resourcePath: /migration/ns/{nsId}/resources/vNet
      description: Create a new migrated virtual network in the namespace
    DeleteInfra:
      method: delete
      resourcePath: /migration/ns/{nsId}/mci/{mciId}
      description: Delete the migrated mult-cloud infrastructure (MCI)
    DeleteMigratedSSHKey:
      method: delete
      resourcePath: /migration/ns/{nsId}/resources/sshKey/{sshKeyId}
      description: Delete a specific migrated SSH key in the namespace
    DeleteMigratedSecurityGroup:
      method: delete
      resourcePath: /migration/ns/{nsId}/resources/securityGroup/{sgId}
      description: Delete a specific migrated security group in the namespace
    DeleteMigratedVNet:
      method: delete
      resourcePath: /migration/ns/{nsId}/resources/vNet/{vNetId}
      description: Delete a specific migrated virtual network in the namespace
    GetInfra:
      method: get
      resourcePath: /migration/ns/{nsId}/mci/{mciId}
      description: Get the migrated multi-cloud infrastructure (MCI)
    GetMigratedSSHKey:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/sshKey/{sshKeyId}
      description: Get details of a specific migrated SSH key in the namespace
    GetMigratedSecurityGroup:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/securityGroup/{sgId}
      description: Get details of a specific migrated security group in the namespace
    GetMigratedVNet:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/vNet/{vNetId}
      description: Get details of a specific virtual network in the namespace
    GetReadyz:
      method: get
      resourcePath: /readyz
      description: Check Beetle is ready
    ListInfra:
      method: get
      resourcePath: /migration/ns/{nsId}/mci
      description: Get the migrated multi-cloud infrastructure (MCI)
    ListMigratedSSHKeys:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/sshKey
      description: Get the list of all migrated SSH keys in the namespace
    ListMigratedSecurityGroups:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/securityGroup
      description: Get the list of all migrated security groups in the namespace
    ListMigratedVNets:
      method: get
      resourcePath: /migration/ns/{nsId}/resources/vNet
      description: Get the list of all migrated virtual networks in the namespace
    MigrateInfra:
      method: post
      resourcePath: /migration/ns/{nsId}/mci
      description: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
        with defaults.
    MigrateInfraWithDefaults:
      method: post
      resourcePath: /migration/ns/{nsId}/mciWithDefaults
      description: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
        with defaults.
    RecommendContainerInfra:
      method: post
      resourcePath: /recommendation/containerInfra
      description: |-
        Recommend an appropriate container infrastructure for container-based workloads

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can be set in the query parameter or the request body.
        - If both are set, the values in the request body take precedence.
    RecommendSecurityGroups:
      method: post
      resourcePath: /recommendation/resources/securityGroups
      description: |-
        Recommend an appropriate security group for cloud migration

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredProvider and desiredRegion are set on request body, the values in the query parameter will be ignored.
    RecommendVMInfra:
      method: post
      resourcePath: /recommendation/mci
      description: |-
        Recommend an appropriate VM infrastructure (i.e., MCI, multi-cloud infrastructure) for cloud migration

        [Note] `desiredCsp` and `desiredRegion` are required.
        - `desiredCsp` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredCsp and desiredRegion are set on request body, the values in the query parameter will be ignored.
    RecommendVMInfraWithDefaults:
      method: post
      resourcePath: /recommendation/mciWithDefaults
      description: |-
        Recommend an appropriate VM infrastructure (i.e., MCI, multi-cloud infrastructure) with defaults for cloud migration

        [Note] `desiredCsp` and `desiredRegion` are required.
        - `desiredCsp` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredCsp and desiredRegion are set on request body, the values in the query parameter will be ignored.
    RecommendVNet:
      method: post
      resourcePath: /recommendation/resources/vNet
      description: |-
        Recommend an appropriate virtual network for cloud migration

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredProvider and desiredRegion are set on request body, the values in the query parameter will be ignored.
    RecommendVmOsImages:
      method: post
      resourcePath: /recommendation/resources/vmOsImages
      description: |-
        Recommend an appropriate OS image for cloud migration

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredProvider and desiredRegion are set on request body, the values in the query parameter will be ignored.
    RecommendVmSpecs:
      method: post
      resourcePath: /recommendation/resources/vmSpecs
      description: |-
        Recommend an appropriate VM specification for cloud migration

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredProvider and desiredRegion are set on request body, the values in the query parameter will be ignored.
        - If `targetMachineId` is provided, only that specific machine will be processed.
    TestTracing:
      method: get
      resourcePath: /test/tracing
      description: Test tracing to Tumblebug
  cm-cicada:
    Clear-Task-Instances:
      method: post
      resourcePath: /workflow/{wfId}/workflowRun/{wfRunId}/range
      description: Clear the task Instance.
    Create-Task-Component:
      method: post
      resourcePath: /task_component
      description: Register the task component.
    Create-Workflow:
      method: post
      resourcePath: /workflow
      description: Create a workflow.
    Delete-Task-Component:
      method: delete
      resourcePath: /task_component/{tcId}
      description: Delete the task component.
    Delete-Workflow:
      method: delete
      resourcePath: /workflow/{wfId}
      description: Delete the workflow.
    Get-Event-Logs:
      method: get
      resourcePath: /workflow/{wfId}/eventlogs
      description: Get Eventlog.
    Get-Import-Errors:
      method: get
      resourcePath: /importErrors
      description: Get the importErrors.
    Get-Task:
      method: get
      resourcePath: /workflow/{wfId}/task/{taskId}
      description: Get the task.
    Get-Task-Component:
      method: get
      resourcePath: /task_component/{tcId}
      description: Get the task component.
    Get-Task-Component-By-Name:
      method: get
      resourcePath: /task_component/name/{tcName}
      description: Get the task component by name.
    Get-Task-Directly:
      method: get
      resourcePath: /task/{taskId}
      description: Get the task directly.
    Get-Task-From-Task-Group:
      method: get
      resourcePath: /workflow/{wfId}/task_group/{tgId}/task/{taskId}
      description: Get the task from the task group.
    Get-Task-Group:
      method: get
      resourcePath: /workflow/{wfId}/task_group/{tgId}
      description: Get the task group.
    Get-Task-Group-Directly:
      method: get
      resourcePath: /task_group/{tgId}
      description: Get the task group directly.
    Get-Task-Instances:
      method: get
      resourcePath: /workflow/{wfId}/workflowRun/{wfRunId}/taskInstances
      description: Get the task Logs.
    Get-Task-Logs:
      method: get
      resourcePath: /workflow/{wfId}/workflowRun/{wfRunId}/task/{taskId}/taskTryNum/{taskTyNum}/logs
      description: Get the task Logs.
    Get-Task-Logs-Download:
      method: get
      resourcePath: /workflow/{wfId}/workflowRun/{wfRunId}/task/{taskId}/taskTryNum/{taskTyNum}/logs/download
      description: Download the task logs as a file.
    Get-Workflow:
      method: get
      resourcePath: /workflow/{wfId}
      description: Get the workflow.
    Get-Workflow-By-Name:
      method: get
      resourcePath: /workflow/name/{wfName}
      description: Get the workflow by name.
    Get-Workflow-Runs:
      method: get
      resourcePath: /workflow/{wfId}/runs
      description: Get the task Logs.
    Get-Workflow-Template:
      method: get
      resourcePath: /workflow_template/{wftId}
      description: Get the workflow template.
    Get-Workflow-Template-By-Name:
      method: get
      resourcePath: /workflow_template/name/{wfName}
      description: Get the workflow template by name.
    Get-WorkflowStatus:
      method: get
      resourcePath: /workflow/{wfId}/status
      description: Get the WorkflowStatus.
    Get-WorkflowVersion:
      method: get
      resourcePath: /workflow/{wfId}/version/{verId}
      description: Get the WorkflowVersion.
    Health-Check-Readyz:
      method: get
      resourcePath: /readyz
      description: Check Cicada is ready
    List-Task:
      method: get
      resourcePath: /workflow/{wfId}/task
      description: Get a task list of the workflow.
    List-Task-Component:
      method: get
      resourcePath: /task_component
      description: Get a list of task component.
    List-Task-From-Task-Group:
      method: get
      resourcePath: /workflow/{wfId}/task_group/{tgId}/task
      description: Get a task list from the task group.
    List-Task-Group:
      method: get
      resourcePath: /workflow/{wfId}/task_group
      description: Get a task group list of the workflow.
    List-Workflow:
      method: get
      resourcePath: /workflow
      description: Get a workflow list.
    List-Workflow-Template:
      method: get
      resourcePath: /workflow_template
      description: Get a list of workflow template.
    List-WorkflowVersion:
      method: get
      resourcePath: /workflow/{wfId}/version
      description: Get a workflowVersion list.
    Run-Workflow:
      method: post
      resourcePath: /workflow/{wfId}/run
      description: Run the workflow.
    Update-Task-Component:
      method: put
      resourcePath: /task_component/{tcId}
      description: Update the task component.
    Update-Workflow:
      method: put
      resourcePath: /workflow/{wfId}
      description: Update the workflow content.
  cm-damselfly:
    CreateCloudModel:
      method: post
      resourcePath: /cloudmodel
      description: Create a new cloud user model with the given information.
    CreateOnPremModel:
      method: post
      resourcePath: /onpremmodel
      description: Create a new on-premise model with the given information.
    CreateSourceSoftwareModel:
      method: post
      resourcePath: /softwaremodel/source
      description: Create a new source software user model with the given information.
    CreateTargetSoftwareModel:
      method: post
      resourcePath: /softwaremodel/target
      description: Create a new target software user model with the given information.
    DeleteCloudModel:
      method: delete
      resourcePath: /cloudmodel/{id}
      description: Delete a cloud user model with the given information.
    DeleteOnPremModel:
      method: delete
      resourcePath: /onpremmodel/{id}
      description: Delete a on-premise model with the given information.
    DeleteSourceSoftwareModel:
      method: delete
      resourcePath: /softwaremodel/source/{id}
      description: Delete a source software user model with the given information.
    DeleteTargetSoftwareModel:
      method: delete
      resourcePath: /softwaremodel/target/{id}
      description: Delete a target software user model with the given information.
    GetCloudModel:
      method: get
      resourcePath: /cloudmodel/{id}
      description: Get a specific cloud user model.
    GetCloudModels:
      method: get
      resourcePath: /cloudmodel
      description: Get a list of cloud user models.
    GetModels:
      method: get
      resourcePath: /model/{isTargetModel}
      description: Get a list of all user models.
    GetModelsVersion:
      method: get
      resourcePath: /model/version
      description: Get the versions of all models(schemata of on-premise/cloud/software
        migration models)
    GetOnPremModel:
      method: get
      resourcePath: /onpremmodel/{id}
      description: Get a specific on-premise model.
    GetOnPremModels:
      method: get
      resourcePath: /onpremmodel
      description: Get a list of on-premise models.
    GetSourceSoftwareModel:
      method: get
      resourcePath: /softwaremodel/source/{id}
      description: Get a specific source software user model.
    GetSourceSoftwareModels:
      method: get
      resourcePath: /softwaremodel/source
      description: Get a list of source software user models.
    GetTargetSoftwareModel:
      method: get
      resourcePath: /softwaremodel/target/{id}
      description: Get a specific target software user model.
    GetTargetSoftwareModels:
      method: get
      resourcePath: /softwaremodel/target
      description: Get a list of target software user models.
    RestCheckHTTPVersion:
      method: get
      resourcePath: /httpVersion
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
    RestGetReadyz:
      method: get
      resourcePath: /readyz
      description: Check Damselfly is ready
    UpdateCloudModel:
      method: put
      resourcePath: /cloudmodel/{id}
      description: Update a cloud user model with the given information.
    UpdateOnPremModel:
      method: put
      resourcePath: /onpremmodel/{id}
      description: Update a on-premise model with the given information.
    UpdateSourceSoftwareModel:
      method: put
      resourcePath: /softwaremodel/source/{id}
      description: Update a source software user model with the given information.
    UpdateTargetSoftwareModel:
      method: put
      resourcePath: /softwaremodel/target/{id}
      description: Update a target software user model with the given information.
  cm-grasshopper:
    Get-Migration-List:
      method: post
      resourcePath: /software/migration_list
      description: Get software migration list.
    Get-Software-Migration-Log:
      method: get
      resourcePath: /software/package/migrate/log/{executionId}
      description: Get the software migration log.
    Health-Check-Readyz:
      method: get
      resourcePath: /readyz
      description: Check Grasshopper is ready
    Migrate-Software:
      method: post
      resourcePath: /software/migrate
      description: Migrate pieces of software to target.
  cm-honeybee-agent:
    Get-Helm-Info:
      method: get
      resourcePath: /helm
      description: Get helm information.
    Get-Infra-Info:
      method: get
      resourcePath: /infra
      description: Get infra information.
    Get-Kubernetes-Info:
      method: get
      resourcePath: /kubernetes
      description: Get kubernetes information.
    Get-Software-Info:
      method: get
      resourcePath: /software
      description: Get software information.
    Health-Check-Readyz:
      method: get
      resourcePath: /readyz
      description: Check Honeybee Agent is ready
  cm-honeybee:
    Create-Connection-Info:
      method: post
      resourcePath: /source_group/{sgId}/connection_info
      description: Create the connection information.
    Delete-Connection-Info:
      method: delete
      resourcePath: /source_group/{sgId}/connection_info/{connId}
      description: Delete the connection information.
    Delete-Source-Group:
      method: delete
      resourcePath: /source_group/{sgId}
      description: Delete the source group.
    Get-Benchmark-Info:
      method: get
      resourcePath: /bench/{connId}
      description: Get the benchmark information of the connection information.
    Get-Connection-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}
      description: Get the connection information.
    Get-Connection-Info-Directly:
      method: get
      resourcePath: /connection_info/{connId}
      description: Get the connection information directly.
    Get-Helm-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/helm
      description: Get the helm information of the connection information.
    Get-Helm-Info-Source-Group:
      method: get
      resourcePath: /source_group/{sgId}/helm
      description: Get the helm information for all connections in the source group.
    Get-Infra-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/infra
      description: Get the infra information of the connection information.
    Get-Infra-Info-Refined:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/infra/refined
      description: Get the refined infra information of the connection information.
    Get-Infra-Info-Source-Group:
      method: get
      resourcePath: /source_group/{sgId}/infra
      description: Get the infra information for all connections in the source group.
    Get-Infra-Info-Source-Group-Refined:
      method: get
      resourcePath: /source_group/{sgId}/infra/refined
      description: Get the refined infra information for all connections in the source
        group.
    Get-Kubernetes-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/kubernetes
      description: Get the kubernetes information of the connection information.
    Get-Kubernetes-Info-Source-Group:
      method: get
      resourcePath: /source_group/{sgId}/kubernetes
      description: Get the kubernetes information for all connections in the source
        group.
    Get-Software-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/software
      description: Get the software information of the connection information.
    Get-Software-Info-Refined:
      method: get
      resourcePath: /source_group/{sgId}/connection_info/{connId}/software/refined
      description: Get the refined software information of the connection information.
    Get-Software-Info-Source-Group:
      method: get
      resourcePath: /source_group/{sgId}/software
      description: Get the software information for all connections in the source
        group.
    Get-Software-Info-Source-Group-Refined:
      method: get
      resourcePath: /source_group/{sgId}/software/refined
      description: Get the refined software information for all connections in the
        source group.
    Get-Source-Group:
      method: get
      resourcePath: /source_group/{sgId}
      description: Get the source group.
    Health-Check-Readyz:
      method: get
      resourcePath: /readyz
      description: Check Honeybee is ready
    Import-Helm:
      method: post
      resourcePath: /source_group/{sgId}/connection_info/{connId}/import/helm
      description: Import the helm information.
    Import-Helm-Source-Group:
      method: post
      resourcePath: /source_group/{sgId}/import/helm
      description: Import helm information for all connections in the source group.
    Import-Infra:
      method: post
      resourcePath: /source_group/{sgId}/connection_info/{connId}/import/infra
      description: Import the infra information.
    Import-Infra-Source-Group:
      method: post
      resourcePath: /source_group/{sgId}/import/infra
      description: Import infra information for all connections in the source group.
    Import-Kubernetes:
      method: post
      resourcePath: /source_group/{sgId}/connection_info/{connId}/import/kubernetes
      description: Import the kubernetes information.
    Import-Kubernetes-Source-Group:
      method: post
      resourcePath: /source_group/{sgId}/import/kubernetes
      description: Import kubernetes information for all connections in the source
        group.
    Import-Software:
      method: post
      resourcePath: /source_group/{sgId}/connection_info/{connId}/import/software
      description: Import the software information.
    Import-Software-Source-Group:
      method: post
      resourcePath: /source_group/{sgId}/import/software
      description: Import software information for all connections in the source group.
    List-Connection-Info:
      method: get
      resourcePath: /source_group/{sgId}/connection_info
      description: Get a list of connection information.
    List-Source-Group:
      method: get
      resourcePath: /source_group
      description: Get a list of source group.
    Refresh-Connection-Info-Status:
      method: put
      resourcePath: /source_group/{sgId}/connection_info/{connId}/refresh
      description: Refresh the connection info status.
    Refresh-Connection-Info-Status-Directly:
      method: put
      resourcePath: /connection_info/{connId}/refresh
      description: Refresh the connection info status directly.
    Refresh-Source-Group-Connection-Info-Status:
      method: put
      resourcePath: /source_group/{sgId}/refresh
      description: Refresh connection info status of the source group.
    Register-Source-Group:
      method: post
      resourcePath: /source_group
      description: Register the source group.
    Register-Target-To-Source-Group:
      method: post
      resourcePath: /source_group/{sgId}/target
      description: Register target information to the source group.
    Run-Benchmark-Info:
      method: post
      resourcePath: /bench/{connId}/run
      description: Run the benchmark information of the connection information. If
        no Benchmark Agent is present on the connected server, it will be automatically
        installed, and the benchmark will be executed.
    Stop-Benchmark:
      method: post
      resourcePath: /bench/{connId}/stop
      description: Stop the benchmark
    Update-Connection-Info:
      method: put
      resourcePath: /source_group/{sgId}/connection_info/{connId}
      description: Update the connection information.
    Update-Source-Group:
      method: put
      resourcePath: /source_group/{sgId}
      description: Update the source group.
